//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-31294372
// Cuda compilation tools, release 11.7, V11.7.64
// Based on NVVM 7.0.1
//

.version 7.7
.target sm_60
.address_size 64

	// .globl	__raygen__tex_test_camera
.const .align 8 .b8 params[288];

.visible .entry __raygen__tex_test_camera()
{
	.reg .pred 	%p<19>;
	.reg .f32 	%f<101>;
	.reg .b32 	%r<22>;
	.reg .b64 	%rd<27>;


	ld.const.v2.u32 	{%r13, %r14}, [params+64];
	// begin inline asm
	call (%r10), _optix_get_launch_index_x, ();
	// end inline asm
	ld.const.u64 	%rd7, [params+16];
	cvta.to.global.u64 	%rd8, %rd7;
	cvt.u64.u32 	%rd1, %r10;
	mul.wide.u32 	%rd9, %r10, 8;
	add.s64 	%rd10, %rd8, %rd9;
	ld.global.v2.u32 	{%r15, %r16}, [%rd10];
	setp.ge.s32 	%p1, %r15, %r13;
	setp.ge.s32 	%p2, %r16, %r14;
	or.pred  	%p3, %p2, %p1;
	@%p3 bra 	$L__BB0_13;

	cvt.rn.f32.s32 	%f33, %r15;
	add.ftz.f32 	%f34, %f33, 0f3F000000;
	cvt.rn.f32.s32 	%f35, %r16;
	add.ftz.f32 	%f36, %f35, 0f3F000000;
	cvt.rn.f32.s32 	%f37, %r13;
	div.approx.ftz.f32 	%f38, %f34, %f37;
	cvt.rn.f32.s32 	%f39, %r14;
	div.approx.ftz.f32 	%f40, %f36, %f39;
	ld.const.u64 	%rd11, [params+208];
	mov.f32 	%f41, 0f3F800000;
	sub.ftz.f32 	%f42, %f41, %f40;
	tex.2d.v4.f32.f32 	{%f1, %f2, %f3, %f4}, [%rd11, {%f38, %f42}];
	ld.const.u32 	%r9, [params];
	setp.eq.s32 	%p4, %r9, 0;
	ld.const.u64 	%rd12, [params+24];
	cvta.to.global.u64 	%rd13, %rd12;
	shl.b64 	%rd14, %rd1, 4;
	add.s64 	%rd2, %rd13, %rd14;
	mov.f32 	%f32, 0f00000000;
	mov.f32 	%f89, %f32;
	mov.f32 	%f90, %f32;
	mov.f32 	%f91, %f32;
	mov.f32 	%f92, %f32;
	@%p4 bra 	$L__BB0_3;

	ld.global.v4.f32 	{%f89, %f44, %f45, %f92}, [%rd2];
	add.ftz.f32 	%f90, %f44, 0f00000000;
	add.ftz.f32 	%f91, %f45, 0f00000000;

$L__BB0_3:
	abs.ftz.f32 	%f49, %f1;
	abs.ftz.f32 	%f51, %f32;
	setp.eq.ftz.f32 	%p5, %f51, 0f7F800000;
	setp.eq.ftz.f32 	%p6, %f49, 0f7F800000;
	setp.gtu.ftz.f32 	%p7, %f51, 0f7F800000;
	setp.gtu.ftz.f32 	%p8, %f49, 0f7F800000;
	or.pred  	%p9, %p8, %p7;
	or.pred  	%p10, %p9, %p6;
	or.pred  	%p11, %p10, %p5;
	selp.f32 	%f52, 0f00000000, %f1, %p11;
	selp.f32 	%f53, 0f00000000, 0f3F800000, %p11;
	add.ftz.f32 	%f54, %f53, %f92;
	add.ftz.f32 	%f55, %f52, %f89;
	st.global.v4.f32 	[%rd2], {%f55, %f90, %f91, %f54};
	ld.const.u64 	%rd3, [params+32];
	setp.eq.s64 	%p12, %rd3, 0;
	@%p12 bra 	$L__BB0_7;

	cvta.to.global.u64 	%rd15, %rd3;
	add.s64 	%rd4, %rd15, %rd14;
	mov.f32 	%f93, 0f00000000;
	mov.f32 	%f94, %f93;
	mov.f32 	%f95, %f93;
	mov.f32 	%f96, %f93;
	@%p4 bra 	$L__BB0_6;

	ld.global.v4.f32 	{%f93, %f94, %f95, %f63}, [%rd4];
	add.ftz.f32 	%f96, %f63, 0f00000000;

$L__BB0_6:
	mov.f32 	%f65, 0f3E4CCCCD;
	abs.ftz.f32 	%f66, %f65;
	setp.geu.ftz.f32 	%p14, %f66, 0f7F800000;
	selp.f32 	%f67, 0f00000000, 0f3E4CCCCD, %p14;
	add.ftz.f32 	%f68, %f67, %f95;
	add.ftz.f32 	%f69, %f67, %f94;
	add.ftz.f32 	%f70, %f67, %f93;
	st.global.v4.f32 	[%rd4], {%f70, %f69, %f68, %f96};

$L__BB0_7:
	ld.const.u64 	%rd5, [params+40];
	setp.eq.s64 	%p15, %rd5, 0;
	@%p15 bra 	$L__BB0_11;

	cvta.to.global.u64 	%rd17, %rd5;
	add.s64 	%rd6, %rd17, %rd14;
	mov.f32 	%f97, 0f00000000;
	mov.f32 	%f98, %f97;
	mov.f32 	%f99, %f97;
	mov.f32 	%f100, %f97;
	@%p4 bra 	$L__BB0_10;

	ld.global.v4.f32 	{%f97, %f98, %f99, %f78}, [%rd6];
	add.ftz.f32 	%f100, %f78, 0f00000000;

$L__BB0_10:
	mov.f32 	%f80, 0f40400000;
	rsqrt.approx.ftz.f32 	%f81, %f80;
	abs.ftz.f32 	%f82, %f81;
	setp.geu.ftz.f32 	%p17, %f82, 0f7F800000;
	selp.f32 	%f83, 0f00000000, %f81, %p17;
	add.ftz.f32 	%f84, %f83, %f99;
	add.ftz.f32 	%f85, %f83, %f98;
	add.ftz.f32 	%f86, %f83, %f97;
	st.global.v4.f32 	[%rd6], {%f86, %f85, %f84, %f100};

$L__BB0_11:
	ld.const.u32 	%r17, [params+4];
	setp.eq.s32 	%p18, %r17, 0;
	@%p18 bra 	$L__BB0_13;

	not.b32 	%r18, %r16;
	add.s32 	%r19, %r14, %r18;
	mad.lo.s32 	%r20, %r19, %r13, %r15;
	ld.const.u64 	%rd19, [params+48];
	cvta.to.global.u64 	%rd20, %rd19;
	mul.wide.u32 	%rd21, %r20, 16;
	add.s64 	%rd22, %rd20, %rd21;
	mov.f32 	%f87, 0f3F000000;
	mov.f32 	%f88, 0f3DCCCCCD;
	st.global.v4.f32 	[%rd22], {%f88, %f88, %f88, %f87};
	ld.const.u64 	%rd23, [params+56];
	cvta.to.global.u64 	%rd24, %rd23;
	mul.wide.u32 	%rd25, %r20, 8;
	add.s64 	%rd26, %rd24, %rd25;
	mov.u32 	%r21, 305419896;
	st.global.v2.u32 	[%rd26], {%r21, %r21};

$L__BB0_13:
	ret;

}

