//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-28540450
// Cuda compilation tools, release 11.0, V11.0.194
// Based on LLVM 3.4svn
//

.version 7.0
.target sm_50
.address_size 64

	// .globl	__closesthit__curve_radiance__radio_target
.const .align 8 .b8 params[288];

.visible .entry __closesthit__curve_radiance__radio_target(

)
{
	.reg .pred 	%p<57>;
	.reg .b16 	%rs<25>;
	.reg .f32 	%f<263>;
	.reg .b32 	%r<969>;
	.reg .b64 	%rd<799>;


	// inline asm
	call (%rd52), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	// inline asm
	call (%r968), _optix_read_primitive_idx, ();
	// inline asm
	// inline asm
	call _optix_set_payload_3, (%r968);
	// inline asm
	// inline asm
	call (%f32), _optix_get_world_ray_origin_x, ();
	// inline asm
	// inline asm
	call (%f33), _optix_get_world_ray_origin_y, ();
	// inline asm
	// inline asm
	call (%f34), _optix_get_world_ray_origin_z, ();
	// inline asm
	// inline asm
	call (%f35), _optix_get_ray_tmax, ();
	// inline asm
	// inline asm
	call (%f36), _optix_get_world_ray_direction_x, ();
	// inline asm
	// inline asm
	call (%f37), _optix_get_world_ray_direction_y, ();
	// inline asm
	// inline asm
	call (%f38), _optix_get_world_ray_direction_z, ();
	// inline asm
	fma.rn.ftz.f32 	%f2, %f35, %f36, %f32;
	fma.rn.ftz.f32 	%f3, %f35, %f37, %f33;
	fma.rn.ftz.f32 	%f4, %f35, %f38, %f34;
	// inline asm
	call (%r29), _optix_get_hit_kind, ();
	// inline asm
	// inline asm
	call (%r30), _optix_get_primitive_type_from_hit_kind, (%r29);
	// inline asm
	// inline asm
	call (%rd53), _optix_get_gas_traversable_handle, ();
	// inline asm
	// inline asm
	call (%r32), _optix_read_sbt_gas_idx, ();
	// inline asm
	// inline asm
	call (%r33), _optix_get_transform_list_size, ();
	// inline asm
	setp.eq.s32	%p1, %r30, 9473;
	@%p1 bra 	BB0_59;

	setp.eq.s32	%p2, %r30, 9474;
	@%p2 bra 	BB0_31;
	bra.uni 	BB0_2;

BB0_31:
	setp.eq.s32	%p20, %r33, 0;
	@%p20 bra 	BB0_45;

	mov.u32 	%r963, 0;
	// inline asm
	call (%f115), _optix_get_ray_time, ();
	// inline asm

BB0_33:
	.pragma "nounroll";
	// inline asm
	call (%rd298), _optix_get_transform_list_handle, (%r963);
	// inline asm
	// inline asm
	call (%r342), _optix_get_transform_type_from_handle, (%rd298);
	// inline asm
	and.b32  	%r343, %r342, -2;
	setp.eq.s32	%p21, %r343, 2;
	@%p21 bra 	BB0_39;
	bra.uni 	BB0_34;

BB0_39:
	setp.eq.s32	%p24, %r342, 2;
	@%p24 bra 	BB0_42;
	bra.uni 	BB0_40;

BB0_42:
	// inline asm
	call (%rd372), _optix_get_matrix_motion_transform_from_handle, (%rd298);
	// inline asm
	// inline asm
	cvta.to.global.u64 %rd374, %rd372;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r431,%r432,%r433,%r434}, [%rd374];
	// inline asm
	mov.b32	{%rs11, %rs12}, %r433;
	add.s64 	%rd378, %rd372, 16;
	// inline asm
	cvta.to.global.u64 %rd377, %rd378;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r435,%r436,%r437,%r438}, [%rd377];
	// inline asm
	add.s64 	%rd381, %rd372, 32;
	// inline asm
	cvta.to.global.u64 %rd380, %rd381;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r439,%r440,%r441,%r442}, [%rd380];
	// inline asm
	add.s64 	%rd384, %rd372, 48;
	// inline asm
	cvta.to.global.u64 %rd383, %rd384;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r443,%r444,%r445,%r446}, [%rd383];
	// inline asm
	add.s64 	%rd387, %rd372, 64;
	// inline asm
	cvta.to.global.u64 %rd386, %rd387;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r447,%r448,%r449,%r450}, [%rd386];
	// inline asm
	add.s64 	%rd390, %rd372, 80;
	// inline asm
	cvta.to.global.u64 %rd389, %rd390;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r451,%r452,%r453,%r454}, [%rd389];
	// inline asm
	add.s64 	%rd393, %rd372, 96;
	// inline asm
	cvta.to.global.u64 %rd392, %rd393;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r455,%r456,%r457,%r458}, [%rd392];
	// inline asm
	add.s64 	%rd396, %rd372, 112;
	// inline asm
	cvta.to.global.u64 %rd395, %rd396;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r459,%r460,%r461,%r462}, [%rd395];
	// inline asm
	mov.b32 	 %f128, %r434;
	mov.b32 	 %f129, %r435;
	cvt.u32.u16	%r475, %rs11;
	add.s32 	%r476, %r475, -1;
	cvt.rn.f32.s32	%f130, %r476;
	sub.ftz.f32 	%f131, %f115, %f128;
	mul.ftz.f32 	%f132, %f131, %f130;
	sub.ftz.f32 	%f133, %f129, %f128;
	div.approx.ftz.f32 	%f134, %f132, %f133;
	min.ftz.f32 	%f135, %f130, %f134;
	mov.f32 	%f136, 0f00000000;
	max.ftz.f32 	%f137, %f136, %f135;
	cvt.rmi.ftz.f32.f32	%f138, %f137;
	cvt.rzi.ftz.s32.f32	%r477, %f138;
	cvt.s64.s32	%rd26, %r477;
	mul.wide.s32 	%rd407, %r477, 48;
	add.s64 	%rd399, %rd381, %rd407;
	// inline asm
	cvta.to.global.u64 %rd398, %rd399;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r463,%r464,%r465,%r466}, [%rd398];
	// inline asm
	add.s64 	%rd402, %rd399, 16;
	// inline asm
	cvta.to.global.u64 %rd401, %rd402;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r467,%r468,%r469,%r470}, [%rd401];
	// inline asm
	add.s64 	%rd405, %rd399, 32;
	// inline asm
	cvta.to.global.u64 %rd404, %rd405;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r471,%r472,%r473,%r474}, [%rd404];
	// inline asm
	sub.ftz.f32 	%f139, %f137, %f138;
	setp.leu.ftz.f32	%p26, %f139, 0f00000000;
	@%p26 bra 	BB0_44;

	mul.lo.s64 	%rd417, %rd26, 48;
	add.s64 	%rd418, %rd372, %rd417;
	add.s64 	%rd409, %rd418, 80;
	// inline asm
	cvta.to.global.u64 %rd408, %rd409;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r478,%r479,%r480,%r481}, [%rd408];
	// inline asm
	add.s64 	%rd412, %rd418, 96;
	// inline asm
	cvta.to.global.u64 %rd411, %rd412;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r482,%r483,%r484,%r485}, [%rd411];
	// inline asm
	add.s64 	%rd415, %rd418, 112;
	// inline asm
	cvta.to.global.u64 %rd414, %rd415;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r486,%r487,%r488,%r489}, [%rd414];
	// inline asm
	bra.uni 	BB0_44;

BB0_34:
	setp.eq.s32	%p22, %r342, 4;
	@%p22 bra 	BB0_37;
	bra.uni 	BB0_35;

BB0_37:
	// inline asm
	call (%rd795), _optix_get_instance_inverse_transform_from_handle, (%rd298);
	// inline asm
	bra.uni 	BB0_38;

BB0_40:
	// inline asm
	call (%rd313), _optix_get_srt_motion_transform_from_handle, (%rd298);
	// inline asm
	// inline asm
	cvta.to.global.u64 %rd315, %rd313;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r356,%r357,%r358,%r359}, [%rd315];
	// inline asm
	mov.b32	{%rs9, %rs10}, %r358;
	add.s64 	%rd319, %rd313, 16;
	// inline asm
	cvta.to.global.u64 %rd318, %rd319;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r360,%r361,%r362,%r363}, [%rd318];
	// inline asm
	add.s64 	%rd322, %rd313, 32;
	// inline asm
	cvta.to.global.u64 %rd321, %rd322;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r364,%r365,%r366,%r367}, [%rd321];
	// inline asm
	add.s64 	%rd325, %rd313, 48;
	// inline asm
	cvta.to.global.u64 %rd324, %rd325;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r368,%r369,%r370,%r371}, [%rd324];
	// inline asm
	add.s64 	%rd328, %rd313, 64;
	// inline asm
	cvta.to.global.u64 %rd327, %rd328;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r372,%r373,%r374,%r375}, [%rd327];
	// inline asm
	add.s64 	%rd331, %rd313, 80;
	// inline asm
	cvta.to.global.u64 %rd330, %rd331;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r376,%r377,%r378,%r379}, [%rd330];
	// inline asm
	add.s64 	%rd334, %rd313, 96;
	// inline asm
	cvta.to.global.u64 %rd333, %rd334;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r380,%r381,%r382,%r383}, [%rd333];
	// inline asm
	add.s64 	%rd337, %rd313, 112;
	// inline asm
	cvta.to.global.u64 %rd336, %rd337;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r384,%r385,%r386,%r387}, [%rd336];
	// inline asm
	add.s64 	%rd340, %rd313, 128;
	// inline asm
	cvta.to.global.u64 %rd339, %rd340;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r388,%r389,%r390,%r391}, [%rd339];
	// inline asm
	add.s64 	%rd343, %rd313, 144;
	// inline asm
	cvta.to.global.u64 %rd342, %rd343;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r392,%r393,%r394,%r395}, [%rd342];
	// inline asm
	mov.b32 	 %f116, %r359;
	mov.b32 	 %f117, %r360;
	cvt.u32.u16	%r412, %rs9;
	add.s32 	%r413, %r412, -1;
	cvt.rn.f32.s32	%f118, %r413;
	sub.ftz.f32 	%f119, %f115, %f116;
	mul.ftz.f32 	%f120, %f119, %f118;
	sub.ftz.f32 	%f121, %f117, %f116;
	div.approx.ftz.f32 	%f122, %f120, %f121;
	min.ftz.f32 	%f123, %f118, %f122;
	mov.f32 	%f124, 0f00000000;
	max.ftz.f32 	%f125, %f124, %f123;
	cvt.rmi.ftz.f32.f32	%f126, %f125;
	cvt.rzi.ftz.s32.f32	%r414, %f126;
	cvt.s64.s32	%rd24, %r414;
	mul.wide.s32 	%rd357, %r414, 64;
	add.s64 	%rd346, %rd322, %rd357;
	// inline asm
	cvta.to.global.u64 %rd345, %rd346;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r396,%r397,%r398,%r399}, [%rd345];
	// inline asm
	add.s64 	%rd349, %rd346, 16;
	// inline asm
	cvta.to.global.u64 %rd348, %rd349;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r400,%r401,%r402,%r403}, [%rd348];
	// inline asm
	add.s64 	%rd352, %rd346, 32;
	// inline asm
	cvta.to.global.u64 %rd351, %rd352;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r404,%r405,%r406,%r407}, [%rd351];
	// inline asm
	sub.ftz.f32 	%f127, %f125, %f126;
	add.s64 	%rd355, %rd346, 48;
	// inline asm
	cvta.to.global.u64 %rd354, %rd355;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r408,%r409,%r410,%r411}, [%rd354];
	// inline asm
	setp.leu.ftz.f32	%p25, %f127, 0f00000000;
	@%p25 bra 	BB0_44;

	shl.b64 	%rd370, %rd24, 6;
	add.s64 	%rd371, %rd370, %rd313;
	add.s64 	%rd359, %rd371, 96;
	// inline asm
	cvta.to.global.u64 %rd358, %rd359;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r415,%r416,%r417,%r418}, [%rd358];
	// inline asm
	add.s64 	%rd362, %rd371, 112;
	// inline asm
	cvta.to.global.u64 %rd361, %rd362;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r419,%r420,%r421,%r422}, [%rd361];
	// inline asm
	add.s64 	%rd365, %rd371, 128;
	// inline asm
	cvta.to.global.u64 %rd364, %rd365;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r423,%r424,%r425,%r426}, [%rd364];
	// inline asm
	add.s64 	%rd368, %rd371, 144;
	// inline asm
	cvta.to.global.u64 %rd367, %rd368;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r427,%r428,%r429,%r430}, [%rd367];
	// inline asm
	bra.uni 	BB0_44;

BB0_35:
	setp.ne.s32	%p23, %r342, 1;
	@%p23 bra 	BB0_44;

	// inline asm
	call (%rd300), _optix_get_static_transform_from_handle, (%rd298);
	// inline asm
	add.s64 	%rd795, %rd300, 64;

BB0_38:
	// inline asm
	cvta.to.global.u64 %rd304, %rd795;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r344,%r345,%r346,%r347}, [%rd304];
	// inline asm
	add.s64 	%rd308, %rd795, 16;
	// inline asm
	cvta.to.global.u64 %rd307, %rd308;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r348,%r349,%r350,%r351}, [%rd307];
	// inline asm
	add.s64 	%rd311, %rd795, 32;
	// inline asm
	cvta.to.global.u64 %rd310, %rd311;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r352,%r353,%r354,%r355}, [%rd310];
	// inline asm

BB0_44:
	add.s32 	%r963, %r963, 1;
	setp.lt.u32	%p27, %r963, %r33;
	@%p27 bra 	BB0_33;

BB0_45:
	// inline asm
	call (%r490), _optix_get_attribute_0, ();
	// inline asm
	mov.b32 	 %f259, %r490;
	@%p20 bra 	BB0_88;

	mov.u32 	%r964, 0;
	// inline asm
	call (%f140), _optix_get_ray_time, ();
	// inline asm

BB0_47:
	.pragma "nounroll";
	// inline asm
	call (%rd419), _optix_get_transform_list_handle, (%r964);
	// inline asm
	// inline asm
	call (%r493), _optix_get_transform_type_from_handle, (%rd419);
	// inline asm
	and.b32  	%r494, %r493, -2;
	setp.eq.s32	%p29, %r494, 2;
	@%p29 bra 	BB0_53;
	bra.uni 	BB0_48;

BB0_53:
	setp.eq.s32	%p32, %r493, 2;
	@%p32 bra 	BB0_56;
	bra.uni 	BB0_54;

BB0_56:
	// inline asm
	call (%rd493), _optix_get_matrix_motion_transform_from_handle, (%rd419);
	// inline asm
	// inline asm
	cvta.to.global.u64 %rd495, %rd493;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r582,%r583,%r584,%r585}, [%rd495];
	// inline asm
	mov.b32	{%rs15, %rs16}, %r584;
	add.s64 	%rd499, %rd493, 16;
	// inline asm
	cvta.to.global.u64 %rd498, %rd499;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r586,%r587,%r588,%r589}, [%rd498];
	// inline asm
	add.s64 	%rd502, %rd493, 32;
	// inline asm
	cvta.to.global.u64 %rd501, %rd502;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r590,%r591,%r592,%r593}, [%rd501];
	// inline asm
	add.s64 	%rd505, %rd493, 48;
	// inline asm
	cvta.to.global.u64 %rd504, %rd505;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r594,%r595,%r596,%r597}, [%rd504];
	// inline asm
	add.s64 	%rd508, %rd493, 64;
	// inline asm
	cvta.to.global.u64 %rd507, %rd508;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r598,%r599,%r600,%r601}, [%rd507];
	// inline asm
	add.s64 	%rd511, %rd493, 80;
	// inline asm
	cvta.to.global.u64 %rd510, %rd511;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r602,%r603,%r604,%r605}, [%rd510];
	// inline asm
	add.s64 	%rd514, %rd493, 96;
	// inline asm
	cvta.to.global.u64 %rd513, %rd514;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r606,%r607,%r608,%r609}, [%rd513];
	// inline asm
	add.s64 	%rd517, %rd493, 112;
	// inline asm
	cvta.to.global.u64 %rd516, %rd517;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r610,%r611,%r612,%r613}, [%rd516];
	// inline asm
	mov.b32 	 %f153, %r585;
	mov.b32 	 %f154, %r586;
	cvt.u32.u16	%r626, %rs15;
	add.s32 	%r627, %r626, -1;
	cvt.rn.f32.s32	%f155, %r627;
	sub.ftz.f32 	%f156, %f140, %f153;
	mul.ftz.f32 	%f157, %f156, %f155;
	sub.ftz.f32 	%f158, %f154, %f153;
	div.approx.ftz.f32 	%f159, %f157, %f158;
	min.ftz.f32 	%f160, %f155, %f159;
	mov.f32 	%f161, 0f00000000;
	max.ftz.f32 	%f162, %f161, %f160;
	cvt.rmi.ftz.f32.f32	%f163, %f162;
	cvt.rzi.ftz.s32.f32	%r628, %f163;
	cvt.s64.s32	%rd34, %r628;
	mul.wide.s32 	%rd528, %r628, 48;
	add.s64 	%rd520, %rd502, %rd528;
	// inline asm
	cvta.to.global.u64 %rd519, %rd520;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r614,%r615,%r616,%r617}, [%rd519];
	// inline asm
	add.s64 	%rd523, %rd520, 16;
	// inline asm
	cvta.to.global.u64 %rd522, %rd523;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r618,%r619,%r620,%r621}, [%rd522];
	// inline asm
	add.s64 	%rd526, %rd520, 32;
	// inline asm
	cvta.to.global.u64 %rd525, %rd526;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r622,%r623,%r624,%r625}, [%rd525];
	// inline asm
	sub.ftz.f32 	%f164, %f162, %f163;
	setp.leu.ftz.f32	%p34, %f164, 0f00000000;
	@%p34 bra 	BB0_58;

	mul.lo.s64 	%rd538, %rd34, 48;
	add.s64 	%rd539, %rd493, %rd538;
	add.s64 	%rd530, %rd539, 80;
	// inline asm
	cvta.to.global.u64 %rd529, %rd530;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r629,%r630,%r631,%r632}, [%rd529];
	// inline asm
	add.s64 	%rd533, %rd539, 96;
	// inline asm
	cvta.to.global.u64 %rd532, %rd533;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r633,%r634,%r635,%r636}, [%rd532];
	// inline asm
	add.s64 	%rd536, %rd539, 112;
	// inline asm
	cvta.to.global.u64 %rd535, %rd536;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r637,%r638,%r639,%r640}, [%rd535];
	// inline asm
	bra.uni 	BB0_58;

BB0_48:
	setp.eq.s32	%p30, %r493, 4;
	@%p30 bra 	BB0_51;
	bra.uni 	BB0_49;

BB0_51:
	// inline asm
	call (%rd796), _optix_get_instance_inverse_transform_from_handle, (%rd419);
	// inline asm
	bra.uni 	BB0_52;

BB0_54:
	// inline asm
	call (%rd434), _optix_get_srt_motion_transform_from_handle, (%rd419);
	// inline asm
	// inline asm
	cvta.to.global.u64 %rd436, %rd434;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r507,%r508,%r509,%r510}, [%rd436];
	// inline asm
	mov.b32	{%rs13, %rs14}, %r509;
	add.s64 	%rd440, %rd434, 16;
	// inline asm
	cvta.to.global.u64 %rd439, %rd440;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r511,%r512,%r513,%r514}, [%rd439];
	// inline asm
	add.s64 	%rd443, %rd434, 32;
	// inline asm
	cvta.to.global.u64 %rd442, %rd443;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r515,%r516,%r517,%r518}, [%rd442];
	// inline asm
	add.s64 	%rd446, %rd434, 48;
	// inline asm
	cvta.to.global.u64 %rd445, %rd446;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r519,%r520,%r521,%r522}, [%rd445];
	// inline asm
	add.s64 	%rd449, %rd434, 64;
	// inline asm
	cvta.to.global.u64 %rd448, %rd449;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r523,%r524,%r525,%r526}, [%rd448];
	// inline asm
	add.s64 	%rd452, %rd434, 80;
	// inline asm
	cvta.to.global.u64 %rd451, %rd452;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r527,%r528,%r529,%r530}, [%rd451];
	// inline asm
	add.s64 	%rd455, %rd434, 96;
	// inline asm
	cvta.to.global.u64 %rd454, %rd455;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r531,%r532,%r533,%r534}, [%rd454];
	// inline asm
	add.s64 	%rd458, %rd434, 112;
	// inline asm
	cvta.to.global.u64 %rd457, %rd458;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r535,%r536,%r537,%r538}, [%rd457];
	// inline asm
	add.s64 	%rd461, %rd434, 128;
	// inline asm
	cvta.to.global.u64 %rd460, %rd461;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r539,%r540,%r541,%r542}, [%rd460];
	// inline asm
	add.s64 	%rd464, %rd434, 144;
	// inline asm
	cvta.to.global.u64 %rd463, %rd464;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r543,%r544,%r545,%r546}, [%rd463];
	// inline asm
	mov.b32 	 %f141, %r510;
	mov.b32 	 %f142, %r511;
	cvt.u32.u16	%r563, %rs13;
	add.s32 	%r564, %r563, -1;
	cvt.rn.f32.s32	%f143, %r564;
	sub.ftz.f32 	%f144, %f140, %f141;
	mul.ftz.f32 	%f145, %f144, %f143;
	sub.ftz.f32 	%f146, %f142, %f141;
	div.approx.ftz.f32 	%f147, %f145, %f146;
	min.ftz.f32 	%f148, %f143, %f147;
	mov.f32 	%f149, 0f00000000;
	max.ftz.f32 	%f150, %f149, %f148;
	cvt.rmi.ftz.f32.f32	%f151, %f150;
	cvt.rzi.ftz.s32.f32	%r565, %f151;
	cvt.s64.s32	%rd32, %r565;
	mul.wide.s32 	%rd478, %r565, 64;
	add.s64 	%rd467, %rd443, %rd478;
	// inline asm
	cvta.to.global.u64 %rd466, %rd467;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r547,%r548,%r549,%r550}, [%rd466];
	// inline asm
	add.s64 	%rd470, %rd467, 16;
	// inline asm
	cvta.to.global.u64 %rd469, %rd470;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r551,%r552,%r553,%r554}, [%rd469];
	// inline asm
	add.s64 	%rd473, %rd467, 32;
	// inline asm
	cvta.to.global.u64 %rd472, %rd473;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r555,%r556,%r557,%r558}, [%rd472];
	// inline asm
	sub.ftz.f32 	%f152, %f150, %f151;
	add.s64 	%rd476, %rd467, 48;
	// inline asm
	cvta.to.global.u64 %rd475, %rd476;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r559,%r560,%r561,%r562}, [%rd475];
	// inline asm
	setp.leu.ftz.f32	%p33, %f152, 0f00000000;
	@%p33 bra 	BB0_58;

	shl.b64 	%rd491, %rd32, 6;
	add.s64 	%rd492, %rd491, %rd434;
	add.s64 	%rd480, %rd492, 96;
	// inline asm
	cvta.to.global.u64 %rd479, %rd480;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r566,%r567,%r568,%r569}, [%rd479];
	// inline asm
	add.s64 	%rd483, %rd492, 112;
	// inline asm
	cvta.to.global.u64 %rd482, %rd483;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r570,%r571,%r572,%r573}, [%rd482];
	// inline asm
	add.s64 	%rd486, %rd492, 128;
	// inline asm
	cvta.to.global.u64 %rd485, %rd486;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r574,%r575,%r576,%r577}, [%rd485];
	// inline asm
	add.s64 	%rd489, %rd492, 144;
	// inline asm
	cvta.to.global.u64 %rd488, %rd489;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r578,%r579,%r580,%r581}, [%rd488];
	// inline asm
	bra.uni 	BB0_58;

BB0_49:
	setp.ne.s32	%p31, %r493, 1;
	@%p31 bra 	BB0_58;

	// inline asm
	call (%rd421), _optix_get_static_transform_from_handle, (%rd419);
	// inline asm
	add.s64 	%rd796, %rd421, 64;

BB0_52:
	// inline asm
	cvta.to.global.u64 %rd425, %rd796;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r495,%r496,%r497,%r498}, [%rd425];
	// inline asm
	add.s64 	%rd429, %rd796, 16;
	// inline asm
	cvta.to.global.u64 %rd428, %rd429;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r499,%r500,%r501,%r502}, [%rd428];
	// inline asm
	add.s64 	%rd432, %rd796, 32;
	// inline asm
	cvta.to.global.u64 %rd431, %rd432;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r503,%r504,%r505,%r506}, [%rd431];
	// inline asm

BB0_58:
	add.s32 	%r964, %r964, 1;
	setp.lt.u32	%p35, %r964, %r33;
	@%p35 bra 	BB0_47;
	bra.uni 	BB0_88;

BB0_59:
	setp.eq.s32	%p36, %r33, 0;
	@%p36 bra 	BB0_73;

	mov.u32 	%r965, 0;
	// inline asm
	call (%f178), _optix_get_ray_time, ();
	// inline asm

BB0_61:
	.pragma "nounroll";
	// inline asm
	call (%rd541), _optix_get_transform_list_handle, (%r965);
	// inline asm
	// inline asm
	call (%r645), _optix_get_transform_type_from_handle, (%rd541);
	// inline asm
	and.b32  	%r646, %r645, -2;
	setp.eq.s32	%p37, %r646, 2;
	@%p37 bra 	BB0_67;
	bra.uni 	BB0_62;

BB0_67:
	setp.eq.s32	%p40, %r645, 2;
	@%p40 bra 	BB0_70;
	bra.uni 	BB0_68;

BB0_70:
	// inline asm
	call (%rd615), _optix_get_matrix_motion_transform_from_handle, (%rd541);
	// inline asm
	// inline asm
	cvta.to.global.u64 %rd617, %rd615;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r734,%r735,%r736,%r737}, [%rd617];
	// inline asm
	mov.b32	{%rs19, %rs20}, %r736;
	add.s64 	%rd621, %rd615, 16;
	// inline asm
	cvta.to.global.u64 %rd620, %rd621;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r738,%r739,%r740,%r741}, [%rd620];
	// inline asm
	add.s64 	%rd624, %rd615, 32;
	// inline asm
	cvta.to.global.u64 %rd623, %rd624;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r742,%r743,%r744,%r745}, [%rd623];
	// inline asm
	add.s64 	%rd627, %rd615, 48;
	// inline asm
	cvta.to.global.u64 %rd626, %rd627;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r746,%r747,%r748,%r749}, [%rd626];
	// inline asm
	add.s64 	%rd630, %rd615, 64;
	// inline asm
	cvta.to.global.u64 %rd629, %rd630;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r750,%r751,%r752,%r753}, [%rd629];
	// inline asm
	add.s64 	%rd633, %rd615, 80;
	// inline asm
	cvta.to.global.u64 %rd632, %rd633;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r754,%r755,%r756,%r757}, [%rd632];
	// inline asm
	add.s64 	%rd636, %rd615, 96;
	// inline asm
	cvta.to.global.u64 %rd635, %rd636;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r758,%r759,%r760,%r761}, [%rd635];
	// inline asm
	add.s64 	%rd639, %rd615, 112;
	// inline asm
	cvta.to.global.u64 %rd638, %rd639;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r762,%r763,%r764,%r765}, [%rd638];
	// inline asm
	mov.b32 	 %f191, %r737;
	mov.b32 	 %f192, %r738;
	cvt.u32.u16	%r778, %rs19;
	add.s32 	%r779, %r778, -1;
	cvt.rn.f32.s32	%f193, %r779;
	sub.ftz.f32 	%f194, %f178, %f191;
	mul.ftz.f32 	%f195, %f194, %f193;
	sub.ftz.f32 	%f196, %f192, %f191;
	div.approx.ftz.f32 	%f197, %f195, %f196;
	min.ftz.f32 	%f198, %f193, %f197;
	mov.f32 	%f199, 0f00000000;
	max.ftz.f32 	%f200, %f199, %f198;
	cvt.rmi.ftz.f32.f32	%f201, %f200;
	cvt.rzi.ftz.s32.f32	%r780, %f201;
	cvt.s64.s32	%rd42, %r780;
	mul.wide.s32 	%rd650, %r780, 48;
	add.s64 	%rd642, %rd624, %rd650;
	// inline asm
	cvta.to.global.u64 %rd641, %rd642;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r766,%r767,%r768,%r769}, [%rd641];
	// inline asm
	add.s64 	%rd645, %rd642, 16;
	// inline asm
	cvta.to.global.u64 %rd644, %rd645;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r770,%r771,%r772,%r773}, [%rd644];
	// inline asm
	add.s64 	%rd648, %rd642, 32;
	// inline asm
	cvta.to.global.u64 %rd647, %rd648;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r774,%r775,%r776,%r777}, [%rd647];
	// inline asm
	sub.ftz.f32 	%f202, %f200, %f201;
	setp.leu.ftz.f32	%p42, %f202, 0f00000000;
	@%p42 bra 	BB0_72;

	mul.lo.s64 	%rd660, %rd42, 48;
	add.s64 	%rd661, %rd615, %rd660;
	add.s64 	%rd652, %rd661, 80;
	// inline asm
	cvta.to.global.u64 %rd651, %rd652;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r781,%r782,%r783,%r784}, [%rd651];
	// inline asm
	add.s64 	%rd655, %rd661, 96;
	// inline asm
	cvta.to.global.u64 %rd654, %rd655;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r785,%r786,%r787,%r788}, [%rd654];
	// inline asm
	add.s64 	%rd658, %rd661, 112;
	// inline asm
	cvta.to.global.u64 %rd657, %rd658;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r789,%r790,%r791,%r792}, [%rd657];
	// inline asm
	bra.uni 	BB0_72;

BB0_62:
	setp.eq.s32	%p38, %r645, 4;
	@%p38 bra 	BB0_65;
	bra.uni 	BB0_63;

BB0_65:
	// inline asm
	call (%rd797), _optix_get_instance_inverse_transform_from_handle, (%rd541);
	// inline asm
	bra.uni 	BB0_66;

BB0_68:
	// inline asm
	call (%rd556), _optix_get_srt_motion_transform_from_handle, (%rd541);
	// inline asm
	// inline asm
	cvta.to.global.u64 %rd558, %rd556;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r659,%r660,%r661,%r662}, [%rd558];
	// inline asm
	mov.b32	{%rs17, %rs18}, %r661;
	add.s64 	%rd562, %rd556, 16;
	// inline asm
	cvta.to.global.u64 %rd561, %rd562;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r663,%r664,%r665,%r666}, [%rd561];
	// inline asm
	add.s64 	%rd565, %rd556, 32;
	// inline asm
	cvta.to.global.u64 %rd564, %rd565;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r667,%r668,%r669,%r670}, [%rd564];
	// inline asm
	add.s64 	%rd568, %rd556, 48;
	// inline asm
	cvta.to.global.u64 %rd567, %rd568;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r671,%r672,%r673,%r674}, [%rd567];
	// inline asm
	add.s64 	%rd571, %rd556, 64;
	// inline asm
	cvta.to.global.u64 %rd570, %rd571;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r675,%r676,%r677,%r678}, [%rd570];
	// inline asm
	add.s64 	%rd574, %rd556, 80;
	// inline asm
	cvta.to.global.u64 %rd573, %rd574;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r679,%r680,%r681,%r682}, [%rd573];
	// inline asm
	add.s64 	%rd577, %rd556, 96;
	// inline asm
	cvta.to.global.u64 %rd576, %rd577;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r683,%r684,%r685,%r686}, [%rd576];
	// inline asm
	add.s64 	%rd580, %rd556, 112;
	// inline asm
	cvta.to.global.u64 %rd579, %rd580;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r687,%r688,%r689,%r690}, [%rd579];
	// inline asm
	add.s64 	%rd583, %rd556, 128;
	// inline asm
	cvta.to.global.u64 %rd582, %rd583;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r691,%r692,%r693,%r694}, [%rd582];
	// inline asm
	add.s64 	%rd586, %rd556, 144;
	// inline asm
	cvta.to.global.u64 %rd585, %rd586;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r695,%r696,%r697,%r698}, [%rd585];
	// inline asm
	mov.b32 	 %f179, %r662;
	mov.b32 	 %f180, %r663;
	cvt.u32.u16	%r715, %rs17;
	add.s32 	%r716, %r715, -1;
	cvt.rn.f32.s32	%f181, %r716;
	sub.ftz.f32 	%f182, %f178, %f179;
	mul.ftz.f32 	%f183, %f182, %f181;
	sub.ftz.f32 	%f184, %f180, %f179;
	div.approx.ftz.f32 	%f185, %f183, %f184;
	min.ftz.f32 	%f186, %f181, %f185;
	mov.f32 	%f187, 0f00000000;
	max.ftz.f32 	%f188, %f187, %f186;
	cvt.rmi.ftz.f32.f32	%f189, %f188;
	cvt.rzi.ftz.s32.f32	%r717, %f189;
	cvt.s64.s32	%rd40, %r717;
	mul.wide.s32 	%rd600, %r717, 64;
	add.s64 	%rd589, %rd565, %rd600;
	// inline asm
	cvta.to.global.u64 %rd588, %rd589;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r699,%r700,%r701,%r702}, [%rd588];
	// inline asm
	add.s64 	%rd592, %rd589, 16;
	// inline asm
	cvta.to.global.u64 %rd591, %rd592;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r703,%r704,%r705,%r706}, [%rd591];
	// inline asm
	add.s64 	%rd595, %rd589, 32;
	// inline asm
	cvta.to.global.u64 %rd594, %rd595;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r707,%r708,%r709,%r710}, [%rd594];
	// inline asm
	sub.ftz.f32 	%f190, %f188, %f189;
	add.s64 	%rd598, %rd589, 48;
	// inline asm
	cvta.to.global.u64 %rd597, %rd598;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r711,%r712,%r713,%r714}, [%rd597];
	// inline asm
	setp.leu.ftz.f32	%p41, %f190, 0f00000000;
	@%p41 bra 	BB0_72;

	shl.b64 	%rd613, %rd40, 6;
	add.s64 	%rd614, %rd613, %rd556;
	add.s64 	%rd602, %rd614, 96;
	// inline asm
	cvta.to.global.u64 %rd601, %rd602;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r718,%r719,%r720,%r721}, [%rd601];
	// inline asm
	add.s64 	%rd605, %rd614, 112;
	// inline asm
	cvta.to.global.u64 %rd604, %rd605;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r722,%r723,%r724,%r725}, [%rd604];
	// inline asm
	add.s64 	%rd608, %rd614, 128;
	// inline asm
	cvta.to.global.u64 %rd607, %rd608;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r726,%r727,%r728,%r729}, [%rd607];
	// inline asm
	add.s64 	%rd611, %rd614, 144;
	// inline asm
	cvta.to.global.u64 %rd610, %rd611;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r730,%r731,%r732,%r733}, [%rd610];
	// inline asm
	bra.uni 	BB0_72;

BB0_63:
	setp.ne.s32	%p39, %r645, 1;
	@%p39 bra 	BB0_72;

	// inline asm
	call (%rd543), _optix_get_static_transform_from_handle, (%rd541);
	// inline asm
	add.s64 	%rd797, %rd543, 64;

BB0_66:
	// inline asm
	cvta.to.global.u64 %rd547, %rd797;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r647,%r648,%r649,%r650}, [%rd547];
	// inline asm
	add.s64 	%rd551, %rd797, 16;
	// inline asm
	cvta.to.global.u64 %rd550, %rd551;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r651,%r652,%r653,%r654}, [%rd550];
	// inline asm
	add.s64 	%rd554, %rd797, 32;
	// inline asm
	cvta.to.global.u64 %rd553, %rd554;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r655,%r656,%r657,%r658}, [%rd553];
	// inline asm

BB0_72:
	add.s32 	%r965, %r965, 1;
	setp.lt.u32	%p43, %r965, %r33;
	@%p43 bra 	BB0_61;

BB0_73:
	// inline asm
	call (%r793), _optix_get_attribute_0, ();
	// inline asm
	mov.b32 	 %f259, %r793;
	@%p36 bra 	BB0_88;

	mov.u32 	%r966, 0;
	// inline asm
	call (%f203), _optix_get_ray_time, ();
	// inline asm

BB0_75:
	.pragma "nounroll";
	// inline asm
	call (%rd662), _optix_get_transform_list_handle, (%r966);
	// inline asm
	// inline asm
	call (%r796), _optix_get_transform_type_from_handle, (%rd662);
	// inline asm
	and.b32  	%r797, %r796, -2;
	setp.eq.s32	%p45, %r797, 2;
	@%p45 bra 	BB0_81;
	bra.uni 	BB0_76;

BB0_81:
	setp.eq.s32	%p48, %r796, 2;
	@%p48 bra 	BB0_84;
	bra.uni 	BB0_82;

BB0_84:
	// inline asm
	call (%rd736), _optix_get_matrix_motion_transform_from_handle, (%rd662);
	// inline asm
	// inline asm
	cvta.to.global.u64 %rd738, %rd736;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r885,%r886,%r887,%r888}, [%rd738];
	// inline asm
	mov.b32	{%rs23, %rs24}, %r887;
	add.s64 	%rd742, %rd736, 16;
	// inline asm
	cvta.to.global.u64 %rd741, %rd742;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r889,%r890,%r891,%r892}, [%rd741];
	// inline asm
	add.s64 	%rd745, %rd736, 32;
	// inline asm
	cvta.to.global.u64 %rd744, %rd745;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r893,%r894,%r895,%r896}, [%rd744];
	// inline asm
	add.s64 	%rd748, %rd736, 48;
	// inline asm
	cvta.to.global.u64 %rd747, %rd748;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r897,%r898,%r899,%r900}, [%rd747];
	// inline asm
	add.s64 	%rd751, %rd736, 64;
	// inline asm
	cvta.to.global.u64 %rd750, %rd751;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r901,%r902,%r903,%r904}, [%rd750];
	// inline asm
	add.s64 	%rd754, %rd736, 80;
	// inline asm
	cvta.to.global.u64 %rd753, %rd754;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r905,%r906,%r907,%r908}, [%rd753];
	// inline asm
	add.s64 	%rd757, %rd736, 96;
	// inline asm
	cvta.to.global.u64 %rd756, %rd757;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r909,%r910,%r911,%r912}, [%rd756];
	// inline asm
	add.s64 	%rd760, %rd736, 112;
	// inline asm
	cvta.to.global.u64 %rd759, %rd760;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r913,%r914,%r915,%r916}, [%rd759];
	// inline asm
	mov.b32 	 %f216, %r888;
	mov.b32 	 %f217, %r889;
	cvt.u32.u16	%r929, %rs23;
	add.s32 	%r930, %r929, -1;
	cvt.rn.f32.s32	%f218, %r930;
	sub.ftz.f32 	%f219, %f203, %f216;
	mul.ftz.f32 	%f220, %f219, %f218;
	sub.ftz.f32 	%f221, %f217, %f216;
	div.approx.ftz.f32 	%f222, %f220, %f221;
	min.ftz.f32 	%f223, %f218, %f222;
	mov.f32 	%f224, 0f00000000;
	max.ftz.f32 	%f225, %f224, %f223;
	cvt.rmi.ftz.f32.f32	%f226, %f225;
	cvt.rzi.ftz.s32.f32	%r931, %f226;
	cvt.s64.s32	%rd50, %r931;
	mul.wide.s32 	%rd771, %r931, 48;
	add.s64 	%rd763, %rd745, %rd771;
	// inline asm
	cvta.to.global.u64 %rd762, %rd763;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r917,%r918,%r919,%r920}, [%rd762];
	// inline asm
	add.s64 	%rd766, %rd763, 16;
	// inline asm
	cvta.to.global.u64 %rd765, %rd766;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r921,%r922,%r923,%r924}, [%rd765];
	// inline asm
	add.s64 	%rd769, %rd763, 32;
	// inline asm
	cvta.to.global.u64 %rd768, %rd769;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r925,%r926,%r927,%r928}, [%rd768];
	// inline asm
	sub.ftz.f32 	%f227, %f225, %f226;
	setp.leu.ftz.f32	%p50, %f227, 0f00000000;
	@%p50 bra 	BB0_86;

	mul.lo.s64 	%rd781, %rd50, 48;
	add.s64 	%rd782, %rd736, %rd781;
	add.s64 	%rd773, %rd782, 80;
	// inline asm
	cvta.to.global.u64 %rd772, %rd773;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r932,%r933,%r934,%r935}, [%rd772];
	// inline asm
	add.s64 	%rd776, %rd782, 96;
	// inline asm
	cvta.to.global.u64 %rd775, %rd776;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r936,%r937,%r938,%r939}, [%rd775];
	// inline asm
	add.s64 	%rd779, %rd782, 112;
	// inline asm
	cvta.to.global.u64 %rd778, %rd779;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r940,%r941,%r942,%r943}, [%rd778];
	// inline asm
	bra.uni 	BB0_86;

BB0_76:
	setp.eq.s32	%p46, %r796, 4;
	@%p46 bra 	BB0_79;
	bra.uni 	BB0_77;

BB0_79:
	// inline asm
	call (%rd798), _optix_get_instance_inverse_transform_from_handle, (%rd662);
	// inline asm
	bra.uni 	BB0_80;

BB0_82:
	// inline asm
	call (%rd677), _optix_get_srt_motion_transform_from_handle, (%rd662);
	// inline asm
	// inline asm
	cvta.to.global.u64 %rd679, %rd677;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r810,%r811,%r812,%r813}, [%rd679];
	// inline asm
	mov.b32	{%rs21, %rs22}, %r812;
	add.s64 	%rd683, %rd677, 16;
	// inline asm
	cvta.to.global.u64 %rd682, %rd683;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r814,%r815,%r816,%r817}, [%rd682];
	// inline asm
	add.s64 	%rd686, %rd677, 32;
	// inline asm
	cvta.to.global.u64 %rd685, %rd686;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r818,%r819,%r820,%r821}, [%rd685];
	// inline asm
	add.s64 	%rd689, %rd677, 48;
	// inline asm
	cvta.to.global.u64 %rd688, %rd689;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r822,%r823,%r824,%r825}, [%rd688];
	// inline asm
	add.s64 	%rd692, %rd677, 64;
	// inline asm
	cvta.to.global.u64 %rd691, %rd692;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r826,%r827,%r828,%r829}, [%rd691];
	// inline asm
	add.s64 	%rd695, %rd677, 80;
	// inline asm
	cvta.to.global.u64 %rd694, %rd695;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r830,%r831,%r832,%r833}, [%rd694];
	// inline asm
	add.s64 	%rd698, %rd677, 96;
	// inline asm
	cvta.to.global.u64 %rd697, %rd698;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r834,%r835,%r836,%r837}, [%rd697];
	// inline asm
	add.s64 	%rd701, %rd677, 112;
	// inline asm
	cvta.to.global.u64 %rd700, %rd701;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r838,%r839,%r840,%r841}, [%rd700];
	// inline asm
	add.s64 	%rd704, %rd677, 128;
	// inline asm
	cvta.to.global.u64 %rd703, %rd704;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r842,%r843,%r844,%r845}, [%rd703];
	// inline asm
	add.s64 	%rd707, %rd677, 144;
	// inline asm
	cvta.to.global.u64 %rd706, %rd707;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r846,%r847,%r848,%r849}, [%rd706];
	// inline asm
	mov.b32 	 %f204, %r813;
	mov.b32 	 %f205, %r814;
	cvt.u32.u16	%r866, %rs21;
	add.s32 	%r867, %r866, -1;
	cvt.rn.f32.s32	%f206, %r867;
	sub.ftz.f32 	%f207, %f203, %f204;
	mul.ftz.f32 	%f208, %f207, %f206;
	sub.ftz.f32 	%f209, %f205, %f204;
	div.approx.ftz.f32 	%f210, %f208, %f209;
	min.ftz.f32 	%f211, %f206, %f210;
	mov.f32 	%f212, 0f00000000;
	max.ftz.f32 	%f213, %f212, %f211;
	cvt.rmi.ftz.f32.f32	%f214, %f213;
	cvt.rzi.ftz.s32.f32	%r868, %f214;
	cvt.s64.s32	%rd48, %r868;
	mul.wide.s32 	%rd721, %r868, 64;
	add.s64 	%rd710, %rd686, %rd721;
	// inline asm
	cvta.to.global.u64 %rd709, %rd710;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r850,%r851,%r852,%r853}, [%rd709];
	// inline asm
	add.s64 	%rd713, %rd710, 16;
	// inline asm
	cvta.to.global.u64 %rd712, %rd713;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r854,%r855,%r856,%r857}, [%rd712];
	// inline asm
	add.s64 	%rd716, %rd710, 32;
	// inline asm
	cvta.to.global.u64 %rd715, %rd716;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r858,%r859,%r860,%r861}, [%rd715];
	// inline asm
	sub.ftz.f32 	%f215, %f213, %f214;
	add.s64 	%rd719, %rd710, 48;
	// inline asm
	cvta.to.global.u64 %rd718, %rd719;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r862,%r863,%r864,%r865}, [%rd718];
	// inline asm
	setp.leu.ftz.f32	%p49, %f215, 0f00000000;
	@%p49 bra 	BB0_86;

	shl.b64 	%rd734, %rd48, 6;
	add.s64 	%rd735, %rd734, %rd677;
	add.s64 	%rd723, %rd735, 96;
	// inline asm
	cvta.to.global.u64 %rd722, %rd723;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r869,%r870,%r871,%r872}, [%rd722];
	// inline asm
	add.s64 	%rd726, %rd735, 112;
	// inline asm
	cvta.to.global.u64 %rd725, %rd726;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r873,%r874,%r875,%r876}, [%rd725];
	// inline asm
	add.s64 	%rd729, %rd735, 128;
	// inline asm
	cvta.to.global.u64 %rd728, %rd729;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r877,%r878,%r879,%r880}, [%rd728];
	// inline asm
	add.s64 	%rd732, %rd735, 144;
	// inline asm
	cvta.to.global.u64 %rd731, %rd732;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r881,%r882,%r883,%r884}, [%rd731];
	// inline asm
	bra.uni 	BB0_86;

BB0_77:
	setp.ne.s32	%p47, %r796, 1;
	@%p47 bra 	BB0_86;

	// inline asm
	call (%rd664), _optix_get_static_transform_from_handle, (%rd662);
	// inline asm
	add.s64 	%rd798, %rd664, 64;

BB0_80:
	// inline asm
	cvta.to.global.u64 %rd668, %rd798;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r798,%r799,%r800,%r801}, [%rd668];
	// inline asm
	add.s64 	%rd672, %rd798, 16;
	// inline asm
	cvta.to.global.u64 %rd671, %rd672;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r802,%r803,%r804,%r805}, [%rd671];
	// inline asm
	add.s64 	%rd675, %rd798, 32;
	// inline asm
	cvta.to.global.u64 %rd674, %rd675;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r806,%r807,%r808,%r809}, [%rd674];
	// inline asm

BB0_86:
	add.s32 	%r966, %r966, 1;
	setp.lt.u32	%p51, %r966, %r33;
	@%p51 bra 	BB0_75;
	bra.uni 	BB0_88;

BB0_2:
	setp.ne.s32	%p3, %r30, 9475;
	@%p3 bra 	BB0_87;

	setp.eq.s32	%p4, %r33, 0;
	@%p4 bra 	BB0_17;

	mov.u32 	%r961, 0;
	// inline asm
	call (%f48), _optix_get_ray_time, ();
	// inline asm

BB0_5:
	.pragma "nounroll";
	// inline asm
	call (%rd55), _optix_get_transform_list_handle, (%r961);
	// inline asm
	// inline asm
	call (%r39), _optix_get_transform_type_from_handle, (%rd55);
	// inline asm
	and.b32  	%r40, %r39, -2;
	setp.eq.s32	%p5, %r40, 2;
	@%p5 bra 	BB0_11;
	bra.uni 	BB0_6;

BB0_11:
	setp.eq.s32	%p8, %r39, 2;
	@%p8 bra 	BB0_14;
	bra.uni 	BB0_12;

BB0_14:
	// inline asm
	call (%rd129), _optix_get_matrix_motion_transform_from_handle, (%rd55);
	// inline asm
	// inline asm
	cvta.to.global.u64 %rd131, %rd129;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r128,%r129,%r130,%r131}, [%rd131];
	// inline asm
	mov.b32	{%rs3, %rs4}, %r130;
	add.s64 	%rd135, %rd129, 16;
	// inline asm
	cvta.to.global.u64 %rd134, %rd135;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r132,%r133,%r134,%r135}, [%rd134];
	// inline asm
	add.s64 	%rd138, %rd129, 32;
	// inline asm
	cvta.to.global.u64 %rd137, %rd138;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r136,%r137,%r138,%r139}, [%rd137];
	// inline asm
	add.s64 	%rd141, %rd129, 48;
	// inline asm
	cvta.to.global.u64 %rd140, %rd141;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r140,%r141,%r142,%r143}, [%rd140];
	// inline asm
	add.s64 	%rd144, %rd129, 64;
	// inline asm
	cvta.to.global.u64 %rd143, %rd144;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r144,%r145,%r146,%r147}, [%rd143];
	// inline asm
	add.s64 	%rd147, %rd129, 80;
	// inline asm
	cvta.to.global.u64 %rd146, %rd147;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r148,%r149,%r150,%r151}, [%rd146];
	// inline asm
	add.s64 	%rd150, %rd129, 96;
	// inline asm
	cvta.to.global.u64 %rd149, %rd150;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r152,%r153,%r154,%r155}, [%rd149];
	// inline asm
	add.s64 	%rd153, %rd129, 112;
	// inline asm
	cvta.to.global.u64 %rd152, %rd153;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r156,%r157,%r158,%r159}, [%rd152];
	// inline asm
	mov.b32 	 %f61, %r131;
	mov.b32 	 %f62, %r132;
	cvt.u32.u16	%r172, %rs3;
	add.s32 	%r173, %r172, -1;
	cvt.rn.f32.s32	%f63, %r173;
	sub.ftz.f32 	%f64, %f48, %f61;
	mul.ftz.f32 	%f65, %f64, %f63;
	sub.ftz.f32 	%f66, %f62, %f61;
	div.approx.ftz.f32 	%f67, %f65, %f66;
	min.ftz.f32 	%f68, %f63, %f67;
	mov.f32 	%f69, 0f00000000;
	max.ftz.f32 	%f70, %f69, %f68;
	cvt.rmi.ftz.f32.f32	%f71, %f70;
	cvt.rzi.ftz.s32.f32	%r174, %f71;
	cvt.s64.s32	%rd10, %r174;
	mul.wide.s32 	%rd164, %r174, 48;
	add.s64 	%rd156, %rd138, %rd164;
	// inline asm
	cvta.to.global.u64 %rd155, %rd156;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r160,%r161,%r162,%r163}, [%rd155];
	// inline asm
	add.s64 	%rd159, %rd156, 16;
	// inline asm
	cvta.to.global.u64 %rd158, %rd159;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r164,%r165,%r166,%r167}, [%rd158];
	// inline asm
	add.s64 	%rd162, %rd156, 32;
	// inline asm
	cvta.to.global.u64 %rd161, %rd162;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r168,%r169,%r170,%r171}, [%rd161];
	// inline asm
	sub.ftz.f32 	%f72, %f70, %f71;
	setp.leu.ftz.f32	%p10, %f72, 0f00000000;
	@%p10 bra 	BB0_16;

	mul.lo.s64 	%rd174, %rd10, 48;
	add.s64 	%rd175, %rd129, %rd174;
	add.s64 	%rd166, %rd175, 80;
	// inline asm
	cvta.to.global.u64 %rd165, %rd166;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r175,%r176,%r177,%r178}, [%rd165];
	// inline asm
	add.s64 	%rd169, %rd175, 96;
	// inline asm
	cvta.to.global.u64 %rd168, %rd169;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r179,%r180,%r181,%r182}, [%rd168];
	// inline asm
	add.s64 	%rd172, %rd175, 112;
	// inline asm
	cvta.to.global.u64 %rd171, %rd172;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r183,%r184,%r185,%r186}, [%rd171];
	// inline asm
	bra.uni 	BB0_16;

BB0_6:
	setp.eq.s32	%p6, %r39, 4;
	@%p6 bra 	BB0_9;
	bra.uni 	BB0_7;

BB0_9:
	// inline asm
	call (%rd793), _optix_get_instance_inverse_transform_from_handle, (%rd55);
	// inline asm
	bra.uni 	BB0_10;

BB0_12:
	// inline asm
	call (%rd70), _optix_get_srt_motion_transform_from_handle, (%rd55);
	// inline asm
	// inline asm
	cvta.to.global.u64 %rd72, %rd70;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r53,%r54,%r55,%r56}, [%rd72];
	// inline asm
	mov.b32	{%rs1, %rs2}, %r55;
	add.s64 	%rd76, %rd70, 16;
	// inline asm
	cvta.to.global.u64 %rd75, %rd76;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r57,%r58,%r59,%r60}, [%rd75];
	// inline asm
	add.s64 	%rd79, %rd70, 32;
	// inline asm
	cvta.to.global.u64 %rd78, %rd79;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r61,%r62,%r63,%r64}, [%rd78];
	// inline asm
	add.s64 	%rd82, %rd70, 48;
	// inline asm
	cvta.to.global.u64 %rd81, %rd82;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r65,%r66,%r67,%r68}, [%rd81];
	// inline asm
	add.s64 	%rd85, %rd70, 64;
	// inline asm
	cvta.to.global.u64 %rd84, %rd85;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r69,%r70,%r71,%r72}, [%rd84];
	// inline asm
	add.s64 	%rd88, %rd70, 80;
	// inline asm
	cvta.to.global.u64 %rd87, %rd88;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r73,%r74,%r75,%r76}, [%rd87];
	// inline asm
	add.s64 	%rd91, %rd70, 96;
	// inline asm
	cvta.to.global.u64 %rd90, %rd91;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r77,%r78,%r79,%r80}, [%rd90];
	// inline asm
	add.s64 	%rd94, %rd70, 112;
	// inline asm
	cvta.to.global.u64 %rd93, %rd94;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r81,%r82,%r83,%r84}, [%rd93];
	// inline asm
	add.s64 	%rd97, %rd70, 128;
	// inline asm
	cvta.to.global.u64 %rd96, %rd97;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r85,%r86,%r87,%r88}, [%rd96];
	// inline asm
	add.s64 	%rd100, %rd70, 144;
	// inline asm
	cvta.to.global.u64 %rd99, %rd100;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r89,%r90,%r91,%r92}, [%rd99];
	// inline asm
	mov.b32 	 %f49, %r56;
	mov.b32 	 %f50, %r57;
	cvt.u32.u16	%r109, %rs1;
	add.s32 	%r110, %r109, -1;
	cvt.rn.f32.s32	%f51, %r110;
	sub.ftz.f32 	%f52, %f48, %f49;
	mul.ftz.f32 	%f53, %f52, %f51;
	sub.ftz.f32 	%f54, %f50, %f49;
	div.approx.ftz.f32 	%f55, %f53, %f54;
	min.ftz.f32 	%f56, %f51, %f55;
	mov.f32 	%f57, 0f00000000;
	max.ftz.f32 	%f58, %f57, %f56;
	cvt.rmi.ftz.f32.f32	%f59, %f58;
	cvt.rzi.ftz.s32.f32	%r111, %f59;
	cvt.s64.s32	%rd8, %r111;
	mul.wide.s32 	%rd114, %r111, 64;
	add.s64 	%rd103, %rd79, %rd114;
	// inline asm
	cvta.to.global.u64 %rd102, %rd103;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r93,%r94,%r95,%r96}, [%rd102];
	// inline asm
	add.s64 	%rd106, %rd103, 16;
	// inline asm
	cvta.to.global.u64 %rd105, %rd106;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r97,%r98,%r99,%r100}, [%rd105];
	// inline asm
	add.s64 	%rd109, %rd103, 32;
	// inline asm
	cvta.to.global.u64 %rd108, %rd109;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r101,%r102,%r103,%r104}, [%rd108];
	// inline asm
	sub.ftz.f32 	%f60, %f58, %f59;
	add.s64 	%rd112, %rd103, 48;
	// inline asm
	cvta.to.global.u64 %rd111, %rd112;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r105,%r106,%r107,%r108}, [%rd111];
	// inline asm
	setp.leu.ftz.f32	%p9, %f60, 0f00000000;
	@%p9 bra 	BB0_16;

	shl.b64 	%rd127, %rd8, 6;
	add.s64 	%rd128, %rd127, %rd70;
	add.s64 	%rd116, %rd128, 96;
	// inline asm
	cvta.to.global.u64 %rd115, %rd116;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r112,%r113,%r114,%r115}, [%rd115];
	// inline asm
	add.s64 	%rd119, %rd128, 112;
	// inline asm
	cvta.to.global.u64 %rd118, %rd119;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r116,%r117,%r118,%r119}, [%rd118];
	// inline asm
	add.s64 	%rd122, %rd128, 128;
	// inline asm
	cvta.to.global.u64 %rd121, %rd122;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r120,%r121,%r122,%r123}, [%rd121];
	// inline asm
	add.s64 	%rd125, %rd128, 144;
	// inline asm
	cvta.to.global.u64 %rd124, %rd125;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r124,%r125,%r126,%r127}, [%rd124];
	// inline asm
	bra.uni 	BB0_16;

BB0_7:
	setp.ne.s32	%p7, %r39, 1;
	@%p7 bra 	BB0_16;

	// inline asm
	call (%rd57), _optix_get_static_transform_from_handle, (%rd55);
	// inline asm
	add.s64 	%rd793, %rd57, 64;

BB0_10:
	// inline asm
	cvta.to.global.u64 %rd61, %rd793;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r41,%r42,%r43,%r44}, [%rd61];
	// inline asm
	add.s64 	%rd65, %rd793, 16;
	// inline asm
	cvta.to.global.u64 %rd64, %rd65;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r45,%r46,%r47,%r48}, [%rd64];
	// inline asm
	add.s64 	%rd68, %rd793, 32;
	// inline asm
	cvta.to.global.u64 %rd67, %rd68;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r49,%r50,%r51,%r52}, [%rd67];
	// inline asm

BB0_16:
	add.s32 	%r961, %r961, 1;
	setp.lt.u32	%p11, %r961, %r33;
	@%p11 bra 	BB0_5;

BB0_17:
	// inline asm
	call (%r187), _optix_get_attribute_0, ();
	// inline asm
	mov.b32 	 %f259, %r187;
	@%p4 bra 	BB0_88;

	mov.u32 	%r962, 0;
	// inline asm
	call (%f73), _optix_get_ray_time, ();
	// inline asm

BB0_19:
	.pragma "nounroll";
	// inline asm
	call (%rd176), _optix_get_transform_list_handle, (%r962);
	// inline asm
	// inline asm
	call (%r190), _optix_get_transform_type_from_handle, (%rd176);
	// inline asm
	and.b32  	%r191, %r190, -2;
	setp.eq.s32	%p13, %r191, 2;
	@%p13 bra 	BB0_25;
	bra.uni 	BB0_20;

BB0_25:
	setp.eq.s32	%p16, %r190, 2;
	@%p16 bra 	BB0_28;
	bra.uni 	BB0_26;

BB0_28:
	// inline asm
	call (%rd250), _optix_get_matrix_motion_transform_from_handle, (%rd176);
	// inline asm
	// inline asm
	cvta.to.global.u64 %rd252, %rd250;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r279,%r280,%r281,%r282}, [%rd252];
	// inline asm
	mov.b32	{%rs7, %rs8}, %r281;
	add.s64 	%rd256, %rd250, 16;
	// inline asm
	cvta.to.global.u64 %rd255, %rd256;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r283,%r284,%r285,%r286}, [%rd255];
	// inline asm
	add.s64 	%rd259, %rd250, 32;
	// inline asm
	cvta.to.global.u64 %rd258, %rd259;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r287,%r288,%r289,%r290}, [%rd258];
	// inline asm
	add.s64 	%rd262, %rd250, 48;
	// inline asm
	cvta.to.global.u64 %rd261, %rd262;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r291,%r292,%r293,%r294}, [%rd261];
	// inline asm
	add.s64 	%rd265, %rd250, 64;
	// inline asm
	cvta.to.global.u64 %rd264, %rd265;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r295,%r296,%r297,%r298}, [%rd264];
	// inline asm
	add.s64 	%rd268, %rd250, 80;
	// inline asm
	cvta.to.global.u64 %rd267, %rd268;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r299,%r300,%r301,%r302}, [%rd267];
	// inline asm
	add.s64 	%rd271, %rd250, 96;
	// inline asm
	cvta.to.global.u64 %rd270, %rd271;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r303,%r304,%r305,%r306}, [%rd270];
	// inline asm
	add.s64 	%rd274, %rd250, 112;
	// inline asm
	cvta.to.global.u64 %rd273, %rd274;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r307,%r308,%r309,%r310}, [%rd273];
	// inline asm
	mov.b32 	 %f86, %r282;
	mov.b32 	 %f87, %r283;
	cvt.u32.u16	%r323, %rs7;
	add.s32 	%r324, %r323, -1;
	cvt.rn.f32.s32	%f88, %r324;
	sub.ftz.f32 	%f89, %f73, %f86;
	mul.ftz.f32 	%f90, %f89, %f88;
	sub.ftz.f32 	%f91, %f87, %f86;
	div.approx.ftz.f32 	%f92, %f90, %f91;
	min.ftz.f32 	%f93, %f88, %f92;
	mov.f32 	%f94, 0f00000000;
	max.ftz.f32 	%f95, %f94, %f93;
	cvt.rmi.ftz.f32.f32	%f96, %f95;
	cvt.rzi.ftz.s32.f32	%r325, %f96;
	cvt.s64.s32	%rd18, %r325;
	mul.wide.s32 	%rd285, %r325, 48;
	add.s64 	%rd277, %rd259, %rd285;
	// inline asm
	cvta.to.global.u64 %rd276, %rd277;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r311,%r312,%r313,%r314}, [%rd276];
	// inline asm
	add.s64 	%rd280, %rd277, 16;
	// inline asm
	cvta.to.global.u64 %rd279, %rd280;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r315,%r316,%r317,%r318}, [%rd279];
	// inline asm
	add.s64 	%rd283, %rd277, 32;
	// inline asm
	cvta.to.global.u64 %rd282, %rd283;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r319,%r320,%r321,%r322}, [%rd282];
	// inline asm
	sub.ftz.f32 	%f97, %f95, %f96;
	setp.leu.ftz.f32	%p18, %f97, 0f00000000;
	@%p18 bra 	BB0_30;

	mul.lo.s64 	%rd295, %rd18, 48;
	add.s64 	%rd296, %rd250, %rd295;
	add.s64 	%rd287, %rd296, 80;
	// inline asm
	cvta.to.global.u64 %rd286, %rd287;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r326,%r327,%r328,%r329}, [%rd286];
	// inline asm
	add.s64 	%rd290, %rd296, 96;
	// inline asm
	cvta.to.global.u64 %rd289, %rd290;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r330,%r331,%r332,%r333}, [%rd289];
	// inline asm
	add.s64 	%rd293, %rd296, 112;
	// inline asm
	cvta.to.global.u64 %rd292, %rd293;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r334,%r335,%r336,%r337}, [%rd292];
	// inline asm
	bra.uni 	BB0_30;

BB0_20:
	setp.eq.s32	%p14, %r190, 4;
	@%p14 bra 	BB0_23;
	bra.uni 	BB0_21;

BB0_23:
	// inline asm
	call (%rd794), _optix_get_instance_inverse_transform_from_handle, (%rd176);
	// inline asm
	bra.uni 	BB0_24;

BB0_26:
	// inline asm
	call (%rd191), _optix_get_srt_motion_transform_from_handle, (%rd176);
	// inline asm
	// inline asm
	cvta.to.global.u64 %rd193, %rd191;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r204,%r205,%r206,%r207}, [%rd193];
	// inline asm
	mov.b32	{%rs5, %rs6}, %r206;
	add.s64 	%rd197, %rd191, 16;
	// inline asm
	cvta.to.global.u64 %rd196, %rd197;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r208,%r209,%r210,%r211}, [%rd196];
	// inline asm
	add.s64 	%rd200, %rd191, 32;
	// inline asm
	cvta.to.global.u64 %rd199, %rd200;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r212,%r213,%r214,%r215}, [%rd199];
	// inline asm
	add.s64 	%rd203, %rd191, 48;
	// inline asm
	cvta.to.global.u64 %rd202, %rd203;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r216,%r217,%r218,%r219}, [%rd202];
	// inline asm
	add.s64 	%rd206, %rd191, 64;
	// inline asm
	cvta.to.global.u64 %rd205, %rd206;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r220,%r221,%r222,%r223}, [%rd205];
	// inline asm
	add.s64 	%rd209, %rd191, 80;
	// inline asm
	cvta.to.global.u64 %rd208, %rd209;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r224,%r225,%r226,%r227}, [%rd208];
	// inline asm
	add.s64 	%rd212, %rd191, 96;
	// inline asm
	cvta.to.global.u64 %rd211, %rd212;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r228,%r229,%r230,%r231}, [%rd211];
	// inline asm
	add.s64 	%rd215, %rd191, 112;
	// inline asm
	cvta.to.global.u64 %rd214, %rd215;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r232,%r233,%r234,%r235}, [%rd214];
	// inline asm
	add.s64 	%rd218, %rd191, 128;
	// inline asm
	cvta.to.global.u64 %rd217, %rd218;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r236,%r237,%r238,%r239}, [%rd217];
	// inline asm
	add.s64 	%rd221, %rd191, 144;
	// inline asm
	cvta.to.global.u64 %rd220, %rd221;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r240,%r241,%r242,%r243}, [%rd220];
	// inline asm
	mov.b32 	 %f74, %r207;
	mov.b32 	 %f75, %r208;
	cvt.u32.u16	%r260, %rs5;
	add.s32 	%r261, %r260, -1;
	cvt.rn.f32.s32	%f76, %r261;
	sub.ftz.f32 	%f77, %f73, %f74;
	mul.ftz.f32 	%f78, %f77, %f76;
	sub.ftz.f32 	%f79, %f75, %f74;
	div.approx.ftz.f32 	%f80, %f78, %f79;
	min.ftz.f32 	%f81, %f76, %f80;
	mov.f32 	%f82, 0f00000000;
	max.ftz.f32 	%f83, %f82, %f81;
	cvt.rmi.ftz.f32.f32	%f84, %f83;
	cvt.rzi.ftz.s32.f32	%r262, %f84;
	cvt.s64.s32	%rd16, %r262;
	mul.wide.s32 	%rd235, %r262, 64;
	add.s64 	%rd224, %rd200, %rd235;
	// inline asm
	cvta.to.global.u64 %rd223, %rd224;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r244,%r245,%r246,%r247}, [%rd223];
	// inline asm
	add.s64 	%rd227, %rd224, 16;
	// inline asm
	cvta.to.global.u64 %rd226, %rd227;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r248,%r249,%r250,%r251}, [%rd226];
	// inline asm
	add.s64 	%rd230, %rd224, 32;
	// inline asm
	cvta.to.global.u64 %rd229, %rd230;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r252,%r253,%r254,%r255}, [%rd229];
	// inline asm
	sub.ftz.f32 	%f85, %f83, %f84;
	add.s64 	%rd233, %rd224, 48;
	// inline asm
	cvta.to.global.u64 %rd232, %rd233;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r256,%r257,%r258,%r259}, [%rd232];
	// inline asm
	setp.leu.ftz.f32	%p17, %f85, 0f00000000;
	@%p17 bra 	BB0_30;

	shl.b64 	%rd248, %rd16, 6;
	add.s64 	%rd249, %rd248, %rd191;
	add.s64 	%rd237, %rd249, 96;
	// inline asm
	cvta.to.global.u64 %rd236, %rd237;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r263,%r264,%r265,%r266}, [%rd236];
	// inline asm
	add.s64 	%rd240, %rd249, 112;
	// inline asm
	cvta.to.global.u64 %rd239, %rd240;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r267,%r268,%r269,%r270}, [%rd239];
	// inline asm
	add.s64 	%rd243, %rd249, 128;
	// inline asm
	cvta.to.global.u64 %rd242, %rd243;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r271,%r272,%r273,%r274}, [%rd242];
	// inline asm
	add.s64 	%rd246, %rd249, 144;
	// inline asm
	cvta.to.global.u64 %rd245, %rd246;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r275,%r276,%r277,%r278}, [%rd245];
	// inline asm
	bra.uni 	BB0_30;

BB0_21:
	setp.ne.s32	%p15, %r190, 1;
	@%p15 bra 	BB0_30;

	// inline asm
	call (%rd178), _optix_get_static_transform_from_handle, (%rd176);
	// inline asm
	add.s64 	%rd794, %rd178, 64;

BB0_24:
	// inline asm
	cvta.to.global.u64 %rd182, %rd794;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r192,%r193,%r194,%r195}, [%rd182];
	// inline asm
	add.s64 	%rd186, %rd794, 16;
	// inline asm
	cvta.to.global.u64 %rd185, %rd186;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r196,%r197,%r198,%r199}, [%rd185];
	// inline asm
	add.s64 	%rd189, %rd794, 32;
	// inline asm
	cvta.to.global.u64 %rd188, %rd189;
	// inline asm
	// inline asm
	ld.global.v4.u32 {%r200,%r201,%r202,%r203}, [%rd188];
	// inline asm

BB0_30:
	add.s32 	%r962, %r962, 1;
	setp.lt.u32	%p19, %r962, %r33;
	@%p19 bra 	BB0_19;
	bra.uni 	BB0_88;

BB0_87:
	// inline asm
	call (%r944), _optix_get_attribute_0, ();
	// inline asm
	mov.b32 	 %f259, %r944;

BB0_88:
	ld.u32 	%r945, [%rd52+100];
	setp.eq.s32	%p52, %r945, 14;
	@%p52 bra 	BB0_90;
	bra.uni 	BB0_89;

BB0_90:
	ld.u64 	%rd783, [%rd52+24];
	mul.wide.u32 	%rd784, %r968, 8;
	add.s64 	%rd785, %rd783, %rd784;
	ld.v2.u32 	{%r968, %r967}, [%rd785];
	bra.uni 	BB0_91;

BB0_89:
	add.s32 	%r967, %r968, 1;

BB0_91:
	ld.u32 	%r949, [%rd52+96];
	and.b32  	%r950, %r949, 1073741823;
	or.b32  	%r951, %r950, 1073741824;
	setp.lt.ftz.f32	%p53, %f259, 0f3F000000;
	selp.b32	%r948, %r951, %r950, %p53;
	// inline asm
	call _optix_set_payload_2, (%r948);
	// inline asm
	ld.v4.f32 	{%f228, %f229, %f230, %f231}, [%rd52+112];
	ld.f32 	%f262, [%rd52+80];
	setp.lt.ftz.f32	%p54, %f262, 0f00000000;
	@%p54 bra 	BB0_93;
	bra.uni 	BB0_92;

BB0_93:
	ld.u64 	%rd786, [%rd52+8];
	mul.wide.s32 	%rd787, %r967, 12;
	add.s64 	%rd788, %rd786, %rd787;
	mul.wide.s32 	%rd789, %r968, 12;
	add.s64 	%rd790, %rd786, %rd789;
	ld.f32 	%f232, [%rd790];
	ld.f32 	%f233, [%rd788];
	sub.ftz.f32 	%f234, %f233, %f232;
	ld.f32 	%f235, [%rd790+4];
	ld.f32 	%f236, [%rd788+4];
	sub.ftz.f32 	%f237, %f236, %f235;
	ld.f32 	%f238, [%rd790+8];
	ld.f32 	%f239, [%rd788+8];
	sub.ftz.f32 	%f240, %f239, %f238;
	fma.rn.ftz.f32 	%f262, %f259, %f234, %f232;
	fma.rn.ftz.f32 	%f261, %f259, %f237, %f235;
	fma.rn.ftz.f32 	%f260, %f259, %f240, %f238;
	bra.uni 	BB0_94;

BB0_92:
	ld.f32 	%f261, [%rd52+84];
	ld.f32 	%f260, [%rd52+88];

BB0_94:
	// inline asm
	call (%r952), _optix_get_payload_0, ();
	// inline asm
	// inline asm
	call (%r953), _optix_get_payload_1, ();
	// inline asm
	cvt.u64.u32	%rd791, %r952;
	cvt.u64.u32	%rd792, %r953;
	bfi.b64 	%rd51, %rd791, %rd792, 32, 32;
	mov.f32 	%f241, 0f3F800000;
	st.v4.f32 	[%rd51+48], {%f241, %f241, %f241, %f241};
	st.v4.f32 	[%rd51+96], {%f2, %f3, %f4, %f35};
	ld.u32 	%r954, [%rd51+12];
	mul.ftz.f32 	%f29, %f228, %f262;
	mul.ftz.f32 	%f30, %f229, %f261;
	mul.ftz.f32 	%f31, %f230, %f260;
	mov.b32 	 %r955, %f29;
	mov.b32 	 %r956, %f30;
	mov.b32 	 %r957, %f31;
	or.b32  	%r958, %r954, -2147483648;
	st.v4.u32 	[%rd51], {%r955, %r956, %r957, %r958};
	and.b32  	%r959, %r954, 16777216;
	setp.eq.s32	%p55, %r959, 0;
	@%p55 bra 	BB0_96;

	ld.v4.f32 	{%f242, %f243, %f244, %f245}, [%rd51+16];
	mul.ftz.f32 	%f249, %f30, %f243;
	mul.ftz.f32 	%f250, %f29, %f242;
	st.v2.f32 	[%rd51+16], {%f250, %f249};
	mul.ftz.f32 	%f251, %f31, %f244;
	st.f32 	[%rd51+24], %f251;

BB0_96:
	ld.u32 	%r960, [%rd51+44];
	setp.ne.s32	%p56, %r960, 0;
	@%p56 bra 	BB0_98;

	ld.v4.f32 	{%f252, %f253, %f254, %f255}, [%rd51+128];
	st.v2.f32 	[%rd51+32], {%f252, %f253};
	st.f32 	[%rd51+40], %f254;

BB0_98:
	ret;
}


