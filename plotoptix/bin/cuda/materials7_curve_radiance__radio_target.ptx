//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-30033411
// Cuda compilation tools, release 11.4, V11.4.48
// Based on NVVM 7.0.1
//

.version 7.4
.target sm_50
.address_size 64

	// .globl	__closesthit__curve_radiance__radio_target
.const .align 8 .b8 params[288];

.visible .entry __closesthit__curve_radiance__radio_target()
{
	.reg .pred 	%p<63>;
	.reg .f32 	%f<257>;
	.reg .b32 	%r<987>;
	.reg .b64 	%rd<800>;


	// begin inline asm
	call (%rd63), _optix_get_sbt_data_ptr_64, ();
	// end inline asm
	// begin inline asm
	call (%r986), _optix_read_primitive_idx, ();
	// end inline asm
	mov.u32 	%r32, 3;
	// begin inline asm
	call _optix_set_payload, (%r32, %r986);
	// end inline asm
	// begin inline asm
	call (%f24), _optix_get_world_ray_origin_x, ();
	// end inline asm
	// begin inline asm
	call (%f25), _optix_get_world_ray_origin_y, ();
	// end inline asm
	// begin inline asm
	call (%f26), _optix_get_world_ray_origin_z, ();
	// end inline asm
	// begin inline asm
	call (%f27), _optix_get_ray_tmax, ();
	// end inline asm
	// begin inline asm
	call (%f28), _optix_get_world_ray_direction_x, ();
	// end inline asm
	// begin inline asm
	call (%f29), _optix_get_world_ray_direction_y, ();
	// end inline asm
	// begin inline asm
	call (%f30), _optix_get_world_ray_direction_z, ();
	// end inline asm
	fma.rn.ftz.f32 	%f1, %f27, %f28, %f24;
	fma.rn.ftz.f32 	%f2, %f27, %f29, %f25;
	fma.rn.ftz.f32 	%f3, %f27, %f30, %f26;
	// begin inline asm
	call (%r34), _optix_get_hit_kind, ();
	// end inline asm
	// begin inline asm
	call (%r35), _optix_get_primitive_type_from_hit_kind, (%r34);
	// end inline asm
	setp.eq.s32 	%p1, %r35, 9473;
	@%p1 bra 	$L__BB0_63;

	setp.eq.s32 	%p2, %r35, 9474;
	@%p2 bra 	$L__BB0_33;

	setp.ne.s32 	%p3, %r35, 9475;
	@%p3 bra 	$L__BB0_93;

	// begin inline asm
	call (%r41), _optix_get_transform_list_size, ();
	// end inline asm
	setp.eq.s32 	%p4, %r41, 0;
	@%p4 bra 	$L__BB0_18;

	// begin inline asm
	call (%r42), _optix_get_transform_list_size, ();
	// end inline asm
	// begin inline asm
	call (%f40), _optix_get_ray_time, ();
	// end inline asm
	setp.eq.s32 	%p5, %r42, 0;
	@%p5 bra 	$L__BB0_18;

	mov.u32 	%r979, 0;
	mov.f32 	%f61, 0f00000000;

$L__BB0_6:
	.pragma "nounroll";
	// begin inline asm
	call (%rd66), _optix_get_transform_list_handle, (%r979);
	// end inline asm
	// begin inline asm
	call (%r45), _optix_get_transform_type_from_handle, (%rd66);
	// end inline asm
	or.b32  	%r46, %r45, 1;
	setp.eq.s32 	%p6, %r46, 3;
	@%p6 bra 	$L__BB0_12;
	bra.uni 	$L__BB0_7;

$L__BB0_12:
	setp.eq.s32 	%p9, %r45, 2;
	@%p9 bra 	$L__BB0_15;
	bra.uni 	$L__BB0_13;

$L__BB0_15:
	// begin inline asm
	call (%rd138), _optix_get_matrix_motion_transform_from_handle, (%rd66);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd140, %rd138;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r134,%r135,%r136,%r137}, [%rd140];
	// end inline asm
	add.s64 	%rd144, %rd138, 16;
	// begin inline asm
	cvta.to.global.u64 %rd143, %rd144;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r138,%r139,%r140,%r141}, [%rd143];
	// end inline asm
	add.s64 	%rd147, %rd138, 32;
	// begin inline asm
	cvta.to.global.u64 %rd146, %rd147;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r142,%r143,%r144,%r145}, [%rd146];
	// end inline asm
	add.s64 	%rd150, %rd138, 48;
	// begin inline asm
	cvta.to.global.u64 %rd149, %rd150;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r146,%r147,%r148,%r149}, [%rd149];
	// end inline asm
	add.s64 	%rd153, %rd138, 64;
	// begin inline asm
	cvta.to.global.u64 %rd152, %rd153;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r150,%r151,%r152,%r153}, [%rd152];
	// end inline asm
	add.s64 	%rd156, %rd138, 80;
	// begin inline asm
	cvta.to.global.u64 %rd155, %rd156;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r154,%r155,%r156,%r157}, [%rd155];
	// end inline asm
	add.s64 	%rd159, %rd138, 96;
	// begin inline asm
	cvta.to.global.u64 %rd158, %rd159;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r158,%r159,%r160,%r161}, [%rd158];
	// end inline asm
	add.s64 	%rd162, %rd138, 112;
	// begin inline asm
	cvta.to.global.u64 %rd161, %rd162;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r162,%r163,%r164,%r165}, [%rd161];
	// end inline asm
	mov.b32 	%f53, %r137;
	mov.b32 	%f54, %r138;
	and.b32  	%r178, %r136, 65535;
	add.s32 	%r179, %r178, -1;
	cvt.rn.f32.s32 	%f55, %r179;
	sub.ftz.f32 	%f56, %f40, %f53;
	mul.ftz.f32 	%f57, %f56, %f55;
	sub.ftz.f32 	%f58, %f54, %f53;
	div.approx.ftz.f32 	%f59, %f57, %f58;
	min.ftz.f32 	%f60, %f55, %f59;
	max.ftz.f32 	%f62, %f61, %f60;
	cvt.rmi.ftz.f32.f32 	%f63, %f62;
	sub.ftz.f32 	%f64, %f62, %f63;
	cvt.rzi.ftz.s32.f32 	%r180, %f63;
	cvt.s64.s32 	%rd11, %r180;
	mul.wide.s32 	%rd173, %r180, 48;
	add.s64 	%rd165, %rd147, %rd173;
	// begin inline asm
	cvta.to.global.u64 %rd164, %rd165;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r166,%r167,%r168,%r169}, [%rd164];
	// end inline asm
	add.s64 	%rd168, %rd165, 16;
	// begin inline asm
	cvta.to.global.u64 %rd167, %rd168;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r170,%r171,%r172,%r173}, [%rd167];
	// end inline asm
	add.s64 	%rd171, %rd165, 32;
	// begin inline asm
	cvta.to.global.u64 %rd170, %rd171;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r174,%r175,%r176,%r177}, [%rd170];
	// end inline asm
	setp.leu.ftz.f32 	%p11, %f64, 0f00000000;
	@%p11 bra 	$L__BB0_17;

	mul.lo.s64 	%rd183, %rd11, 48;
	add.s64 	%rd184, %rd138, %rd183;
	add.s64 	%rd175, %rd184, 80;
	// begin inline asm
	cvta.to.global.u64 %rd174, %rd175;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r181,%r182,%r183,%r184}, [%rd174];
	// end inline asm
	add.s64 	%rd178, %rd184, 96;
	// begin inline asm
	cvta.to.global.u64 %rd177, %rd178;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r185,%r186,%r187,%r188}, [%rd177];
	// end inline asm
	add.s64 	%rd181, %rd184, 112;
	// begin inline asm
	cvta.to.global.u64 %rd180, %rd181;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r189,%r190,%r191,%r192}, [%rd180];
	// end inline asm
	bra.uni 	$L__BB0_17;

$L__BB0_7:
	setp.eq.s32 	%p7, %r45, 4;
	@%p7 bra 	$L__BB0_10;

	setp.ne.s32 	%p8, %r45, 1;
	@%p8 bra 	$L__BB0_17;

	// begin inline asm
	call (%rd68), _optix_get_static_transform_from_handle, (%rd66);
	// end inline asm
	add.s64 	%rd794, %rd68, 64;
	bra.uni 	$L__BB0_11;

$L__BB0_13:
	// begin inline asm
	call (%rd81), _optix_get_srt_motion_transform_from_handle, (%rd66);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd83, %rd81;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r59,%r60,%r61,%r62}, [%rd83];
	// end inline asm
	add.s64 	%rd87, %rd81, 16;
	// begin inline asm
	cvta.to.global.u64 %rd86, %rd87;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r63,%r64,%r65,%r66}, [%rd86];
	// end inline asm
	add.s64 	%rd90, %rd81, 32;
	// begin inline asm
	cvta.to.global.u64 %rd89, %rd90;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r67,%r68,%r69,%r70}, [%rd89];
	// end inline asm
	add.s64 	%rd93, %rd81, 48;
	// begin inline asm
	cvta.to.global.u64 %rd92, %rd93;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r71,%r72,%r73,%r74}, [%rd92];
	// end inline asm
	add.s64 	%rd96, %rd81, 64;
	// begin inline asm
	cvta.to.global.u64 %rd95, %rd96;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r75,%r76,%r77,%r78}, [%rd95];
	// end inline asm
	add.s64 	%rd99, %rd81, 80;
	// begin inline asm
	cvta.to.global.u64 %rd98, %rd99;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r79,%r80,%r81,%r82}, [%rd98];
	// end inline asm
	add.s64 	%rd102, %rd81, 96;
	// begin inline asm
	cvta.to.global.u64 %rd101, %rd102;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r83,%r84,%r85,%r86}, [%rd101];
	// end inline asm
	add.s64 	%rd105, %rd81, 112;
	// begin inline asm
	cvta.to.global.u64 %rd104, %rd105;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r87,%r88,%r89,%r90}, [%rd104];
	// end inline asm
	add.s64 	%rd108, %rd81, 128;
	// begin inline asm
	cvta.to.global.u64 %rd107, %rd108;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r91,%r92,%r93,%r94}, [%rd107];
	// end inline asm
	add.s64 	%rd111, %rd81, 144;
	// begin inline asm
	cvta.to.global.u64 %rd110, %rd111;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r95,%r96,%r97,%r98}, [%rd110];
	// end inline asm
	mov.b32 	%f41, %r62;
	mov.b32 	%f42, %r63;
	and.b32  	%r115, %r61, 65535;
	add.s32 	%r116, %r115, -1;
	cvt.rn.f32.s32 	%f43, %r116;
	sub.ftz.f32 	%f44, %f40, %f41;
	mul.ftz.f32 	%f45, %f44, %f43;
	sub.ftz.f32 	%f46, %f42, %f41;
	div.approx.ftz.f32 	%f47, %f45, %f46;
	min.ftz.f32 	%f48, %f43, %f47;
	max.ftz.f32 	%f50, %f61, %f48;
	cvt.rmi.ftz.f32.f32 	%f51, %f50;
	sub.ftz.f32 	%f52, %f50, %f51;
	cvt.rzi.ftz.s32.f32 	%r117, %f51;
	mul.wide.s32 	%rd125, %r117, 64;
	add.s64 	%rd114, %rd90, %rd125;
	// begin inline asm
	cvta.to.global.u64 %rd113, %rd114;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r99,%r100,%r101,%r102}, [%rd113];
	// end inline asm
	add.s64 	%rd117, %rd114, 16;
	// begin inline asm
	cvta.to.global.u64 %rd116, %rd117;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r103,%r104,%r105,%r106}, [%rd116];
	// end inline asm
	add.s64 	%rd120, %rd114, 32;
	// begin inline asm
	cvta.to.global.u64 %rd119, %rd120;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r107,%r108,%r109,%r110}, [%rd119];
	// end inline asm
	add.s64 	%rd123, %rd114, 48;
	// begin inline asm
	cvta.to.global.u64 %rd122, %rd123;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r111,%r112,%r113,%r114}, [%rd122];
	// end inline asm
	setp.leu.ftz.f32 	%p10, %f52, 0f00000000;
	@%p10 bra 	$L__BB0_17;

	add.s64 	%rd127, %rd114, 64;
	// begin inline asm
	cvta.to.global.u64 %rd126, %rd127;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r118,%r119,%r120,%r121}, [%rd126];
	// end inline asm
	add.s64 	%rd130, %rd117, 64;
	// begin inline asm
	cvta.to.global.u64 %rd129, %rd130;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r122,%r123,%r124,%r125}, [%rd129];
	// end inline asm
	add.s64 	%rd133, %rd120, 64;
	// begin inline asm
	cvta.to.global.u64 %rd132, %rd133;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r126,%r127,%r128,%r129}, [%rd132];
	// end inline asm
	add.s64 	%rd136, %rd123, 64;
	// begin inline asm
	cvta.to.global.u64 %rd135, %rd136;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r130,%r131,%r132,%r133}, [%rd135];
	// end inline asm
	bra.uni 	$L__BB0_17;

$L__BB0_10:
	// begin inline asm
	call (%rd794), _optix_get_instance_inverse_transform_from_handle, (%rd66);
	// end inline asm

$L__BB0_11:
	// begin inline asm
	cvta.to.global.u64 %rd72, %rd794;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r47,%r48,%r49,%r50}, [%rd72];
	// end inline asm
	add.s64 	%rd76, %rd794, 16;
	// begin inline asm
	cvta.to.global.u64 %rd75, %rd76;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r51,%r52,%r53,%r54}, [%rd75];
	// end inline asm
	add.s64 	%rd79, %rd794, 32;
	// begin inline asm
	cvta.to.global.u64 %rd78, %rd79;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r55,%r56,%r57,%r58}, [%rd78];
	// end inline asm

$L__BB0_17:
	add.s32 	%r979, %r979, 1;
	setp.lt.u32 	%p12, %r979, %r42;
	@%p12 bra 	$L__BB0_6;

$L__BB0_18:
	// begin inline asm
	call (%r194), _optix_get_transform_list_size, ();
	// end inline asm
	setp.eq.s32 	%p13, %r194, 0;
	@%p13 bra 	$L__BB0_93;

	// begin inline asm
	call (%r195), _optix_get_transform_list_size, ();
	// end inline asm
	// begin inline asm
	call (%f65), _optix_get_ray_time, ();
	// end inline asm
	setp.eq.s32 	%p14, %r195, 0;
	@%p14 bra 	$L__BB0_93;

	mov.u32 	%r980, 0;
	mov.f32 	%f86, 0f00000000;

$L__BB0_21:
	.pragma "nounroll";
	// begin inline asm
	call (%rd185), _optix_get_transform_list_handle, (%r980);
	// end inline asm
	// begin inline asm
	call (%r198), _optix_get_transform_type_from_handle, (%rd185);
	// end inline asm
	or.b32  	%r199, %r198, 1;
	setp.eq.s32 	%p15, %r199, 3;
	@%p15 bra 	$L__BB0_27;
	bra.uni 	$L__BB0_22;

$L__BB0_27:
	setp.eq.s32 	%p18, %r198, 2;
	@%p18 bra 	$L__BB0_30;
	bra.uni 	$L__BB0_28;

$L__BB0_30:
	// begin inline asm
	call (%rd257), _optix_get_matrix_motion_transform_from_handle, (%rd185);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd259, %rd257;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r287,%r288,%r289,%r290}, [%rd259];
	// end inline asm
	add.s64 	%rd263, %rd257, 16;
	// begin inline asm
	cvta.to.global.u64 %rd262, %rd263;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r291,%r292,%r293,%r294}, [%rd262];
	// end inline asm
	add.s64 	%rd266, %rd257, 32;
	// begin inline asm
	cvta.to.global.u64 %rd265, %rd266;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r295,%r296,%r297,%r298}, [%rd265];
	// end inline asm
	add.s64 	%rd269, %rd257, 48;
	// begin inline asm
	cvta.to.global.u64 %rd268, %rd269;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r299,%r300,%r301,%r302}, [%rd268];
	// end inline asm
	add.s64 	%rd272, %rd257, 64;
	// begin inline asm
	cvta.to.global.u64 %rd271, %rd272;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r303,%r304,%r305,%r306}, [%rd271];
	// end inline asm
	add.s64 	%rd275, %rd257, 80;
	// begin inline asm
	cvta.to.global.u64 %rd274, %rd275;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r307,%r308,%r309,%r310}, [%rd274];
	// end inline asm
	add.s64 	%rd278, %rd257, 96;
	// begin inline asm
	cvta.to.global.u64 %rd277, %rd278;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r311,%r312,%r313,%r314}, [%rd277];
	// end inline asm
	add.s64 	%rd281, %rd257, 112;
	// begin inline asm
	cvta.to.global.u64 %rd280, %rd281;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r315,%r316,%r317,%r318}, [%rd280];
	// end inline asm
	mov.b32 	%f78, %r290;
	mov.b32 	%f79, %r291;
	and.b32  	%r331, %r289, 65535;
	add.s32 	%r332, %r331, -1;
	cvt.rn.f32.s32 	%f80, %r332;
	sub.ftz.f32 	%f81, %f65, %f78;
	mul.ftz.f32 	%f82, %f81, %f80;
	sub.ftz.f32 	%f83, %f79, %f78;
	div.approx.ftz.f32 	%f84, %f82, %f83;
	min.ftz.f32 	%f85, %f80, %f84;
	max.ftz.f32 	%f87, %f86, %f85;
	cvt.rmi.ftz.f32.f32 	%f88, %f87;
	sub.ftz.f32 	%f89, %f87, %f88;
	cvt.rzi.ftz.s32.f32 	%r333, %f88;
	cvt.s64.s32 	%rd21, %r333;
	mul.wide.s32 	%rd292, %r333, 48;
	add.s64 	%rd284, %rd266, %rd292;
	// begin inline asm
	cvta.to.global.u64 %rd283, %rd284;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r319,%r320,%r321,%r322}, [%rd283];
	// end inline asm
	add.s64 	%rd287, %rd284, 16;
	// begin inline asm
	cvta.to.global.u64 %rd286, %rd287;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r323,%r324,%r325,%r326}, [%rd286];
	// end inline asm
	add.s64 	%rd290, %rd284, 32;
	// begin inline asm
	cvta.to.global.u64 %rd289, %rd290;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r327,%r328,%r329,%r330}, [%rd289];
	// end inline asm
	setp.leu.ftz.f32 	%p20, %f89, 0f00000000;
	@%p20 bra 	$L__BB0_32;

	mul.lo.s64 	%rd302, %rd21, 48;
	add.s64 	%rd303, %rd257, %rd302;
	add.s64 	%rd294, %rd303, 80;
	// begin inline asm
	cvta.to.global.u64 %rd293, %rd294;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r334,%r335,%r336,%r337}, [%rd293];
	// end inline asm
	add.s64 	%rd297, %rd303, 96;
	// begin inline asm
	cvta.to.global.u64 %rd296, %rd297;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r338,%r339,%r340,%r341}, [%rd296];
	// end inline asm
	add.s64 	%rd300, %rd303, 112;
	// begin inline asm
	cvta.to.global.u64 %rd299, %rd300;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r342,%r343,%r344,%r345}, [%rd299];
	// end inline asm
	bra.uni 	$L__BB0_32;

$L__BB0_22:
	setp.eq.s32 	%p16, %r198, 4;
	@%p16 bra 	$L__BB0_25;

	setp.ne.s32 	%p17, %r198, 1;
	@%p17 bra 	$L__BB0_32;

	// begin inline asm
	call (%rd187), _optix_get_static_transform_from_handle, (%rd185);
	// end inline asm
	add.s64 	%rd795, %rd187, 64;
	bra.uni 	$L__BB0_26;

$L__BB0_28:
	// begin inline asm
	call (%rd200), _optix_get_srt_motion_transform_from_handle, (%rd185);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd202, %rd200;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r212,%r213,%r214,%r215}, [%rd202];
	// end inline asm
	add.s64 	%rd206, %rd200, 16;
	// begin inline asm
	cvta.to.global.u64 %rd205, %rd206;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r216,%r217,%r218,%r219}, [%rd205];
	// end inline asm
	add.s64 	%rd209, %rd200, 32;
	// begin inline asm
	cvta.to.global.u64 %rd208, %rd209;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r220,%r221,%r222,%r223}, [%rd208];
	// end inline asm
	add.s64 	%rd212, %rd200, 48;
	// begin inline asm
	cvta.to.global.u64 %rd211, %rd212;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r224,%r225,%r226,%r227}, [%rd211];
	// end inline asm
	add.s64 	%rd215, %rd200, 64;
	// begin inline asm
	cvta.to.global.u64 %rd214, %rd215;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r228,%r229,%r230,%r231}, [%rd214];
	// end inline asm
	add.s64 	%rd218, %rd200, 80;
	// begin inline asm
	cvta.to.global.u64 %rd217, %rd218;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r232,%r233,%r234,%r235}, [%rd217];
	// end inline asm
	add.s64 	%rd221, %rd200, 96;
	// begin inline asm
	cvta.to.global.u64 %rd220, %rd221;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r236,%r237,%r238,%r239}, [%rd220];
	// end inline asm
	add.s64 	%rd224, %rd200, 112;
	// begin inline asm
	cvta.to.global.u64 %rd223, %rd224;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r240,%r241,%r242,%r243}, [%rd223];
	// end inline asm
	add.s64 	%rd227, %rd200, 128;
	// begin inline asm
	cvta.to.global.u64 %rd226, %rd227;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r244,%r245,%r246,%r247}, [%rd226];
	// end inline asm
	add.s64 	%rd230, %rd200, 144;
	// begin inline asm
	cvta.to.global.u64 %rd229, %rd230;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r248,%r249,%r250,%r251}, [%rd229];
	// end inline asm
	mov.b32 	%f66, %r215;
	mov.b32 	%f67, %r216;
	and.b32  	%r268, %r214, 65535;
	add.s32 	%r269, %r268, -1;
	cvt.rn.f32.s32 	%f68, %r269;
	sub.ftz.f32 	%f69, %f65, %f66;
	mul.ftz.f32 	%f70, %f69, %f68;
	sub.ftz.f32 	%f71, %f67, %f66;
	div.approx.ftz.f32 	%f72, %f70, %f71;
	min.ftz.f32 	%f73, %f68, %f72;
	max.ftz.f32 	%f75, %f86, %f73;
	cvt.rmi.ftz.f32.f32 	%f76, %f75;
	sub.ftz.f32 	%f77, %f75, %f76;
	cvt.rzi.ftz.s32.f32 	%r270, %f76;
	mul.wide.s32 	%rd244, %r270, 64;
	add.s64 	%rd233, %rd209, %rd244;
	// begin inline asm
	cvta.to.global.u64 %rd232, %rd233;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r252,%r253,%r254,%r255}, [%rd232];
	// end inline asm
	add.s64 	%rd236, %rd233, 16;
	// begin inline asm
	cvta.to.global.u64 %rd235, %rd236;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r256,%r257,%r258,%r259}, [%rd235];
	// end inline asm
	add.s64 	%rd239, %rd233, 32;
	// begin inline asm
	cvta.to.global.u64 %rd238, %rd239;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r260,%r261,%r262,%r263}, [%rd238];
	// end inline asm
	add.s64 	%rd242, %rd233, 48;
	// begin inline asm
	cvta.to.global.u64 %rd241, %rd242;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r264,%r265,%r266,%r267}, [%rd241];
	// end inline asm
	setp.leu.ftz.f32 	%p19, %f77, 0f00000000;
	@%p19 bra 	$L__BB0_32;

	add.s64 	%rd246, %rd233, 64;
	// begin inline asm
	cvta.to.global.u64 %rd245, %rd246;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r271,%r272,%r273,%r274}, [%rd245];
	// end inline asm
	add.s64 	%rd249, %rd236, 64;
	// begin inline asm
	cvta.to.global.u64 %rd248, %rd249;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r275,%r276,%r277,%r278}, [%rd248];
	// end inline asm
	add.s64 	%rd252, %rd239, 64;
	// begin inline asm
	cvta.to.global.u64 %rd251, %rd252;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r279,%r280,%r281,%r282}, [%rd251];
	// end inline asm
	add.s64 	%rd255, %rd242, 64;
	// begin inline asm
	cvta.to.global.u64 %rd254, %rd255;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r283,%r284,%r285,%r286}, [%rd254];
	// end inline asm
	bra.uni 	$L__BB0_32;

$L__BB0_25:
	// begin inline asm
	call (%rd795), _optix_get_instance_inverse_transform_from_handle, (%rd185);
	// end inline asm

$L__BB0_26:
	// begin inline asm
	cvta.to.global.u64 %rd191, %rd795;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r200,%r201,%r202,%r203}, [%rd191];
	// end inline asm
	add.s64 	%rd195, %rd795, 16;
	// begin inline asm
	cvta.to.global.u64 %rd194, %rd195;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r204,%r205,%r206,%r207}, [%rd194];
	// end inline asm
	add.s64 	%rd198, %rd795, 32;
	// begin inline asm
	cvta.to.global.u64 %rd197, %rd198;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r208,%r209,%r210,%r211}, [%rd197];
	// end inline asm

$L__BB0_32:
	add.s32 	%r980, %r980, 1;
	setp.lt.u32 	%p21, %r980, %r195;
	@%p21 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_93;

$L__BB0_63:
	// begin inline asm
	call (%r657), _optix_get_transform_list_size, ();
	// end inline asm
	setp.eq.s32 	%p40, %r657, 0;
	@%p40 bra 	$L__BB0_78;

	// begin inline asm
	call (%r658), _optix_get_transform_list_size, ();
	// end inline asm
	// begin inline asm
	call (%f170), _optix_get_ray_time, ();
	// end inline asm
	setp.eq.s32 	%p41, %r658, 0;
	@%p41 bra 	$L__BB0_78;

	mov.u32 	%r983, 0;
	mov.f32 	%f191, 0f00000000;

$L__BB0_66:
	.pragma "nounroll";
	// begin inline asm
	call (%rd546), _optix_get_transform_list_handle, (%r983);
	// end inline asm
	// begin inline asm
	call (%r661), _optix_get_transform_type_from_handle, (%rd546);
	// end inline asm
	or.b32  	%r662, %r661, 1;
	setp.eq.s32 	%p42, %r662, 3;
	@%p42 bra 	$L__BB0_72;
	bra.uni 	$L__BB0_67;

$L__BB0_72:
	setp.eq.s32 	%p45, %r661, 2;
	@%p45 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_73;

$L__BB0_75:
	// begin inline asm
	call (%rd618), _optix_get_matrix_motion_transform_from_handle, (%rd546);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd620, %rd618;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r750,%r751,%r752,%r753}, [%rd620];
	// end inline asm
	add.s64 	%rd624, %rd618, 16;
	// begin inline asm
	cvta.to.global.u64 %rd623, %rd624;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r754,%r755,%r756,%r757}, [%rd623];
	// end inline asm
	add.s64 	%rd627, %rd618, 32;
	// begin inline asm
	cvta.to.global.u64 %rd626, %rd627;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r758,%r759,%r760,%r761}, [%rd626];
	// end inline asm
	add.s64 	%rd630, %rd618, 48;
	// begin inline asm
	cvta.to.global.u64 %rd629, %rd630;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r762,%r763,%r764,%r765}, [%rd629];
	// end inline asm
	add.s64 	%rd633, %rd618, 64;
	// begin inline asm
	cvta.to.global.u64 %rd632, %rd633;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r766,%r767,%r768,%r769}, [%rd632];
	// end inline asm
	add.s64 	%rd636, %rd618, 80;
	// begin inline asm
	cvta.to.global.u64 %rd635, %rd636;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r770,%r771,%r772,%r773}, [%rd635];
	// end inline asm
	add.s64 	%rd639, %rd618, 96;
	// begin inline asm
	cvta.to.global.u64 %rd638, %rd639;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r774,%r775,%r776,%r777}, [%rd638];
	// end inline asm
	add.s64 	%rd642, %rd618, 112;
	// begin inline asm
	cvta.to.global.u64 %rd641, %rd642;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r778,%r779,%r780,%r781}, [%rd641];
	// end inline asm
	mov.b32 	%f183, %r753;
	mov.b32 	%f184, %r754;
	and.b32  	%r794, %r752, 65535;
	add.s32 	%r795, %r794, -1;
	cvt.rn.f32.s32 	%f185, %r795;
	sub.ftz.f32 	%f186, %f170, %f183;
	mul.ftz.f32 	%f187, %f186, %f185;
	sub.ftz.f32 	%f188, %f184, %f183;
	div.approx.ftz.f32 	%f189, %f187, %f188;
	min.ftz.f32 	%f190, %f185, %f189;
	max.ftz.f32 	%f192, %f191, %f190;
	cvt.rmi.ftz.f32.f32 	%f193, %f192;
	sub.ftz.f32 	%f194, %f192, %f193;
	cvt.rzi.ftz.s32.f32 	%r796, %f193;
	cvt.s64.s32 	%rd51, %r796;
	mul.wide.s32 	%rd653, %r796, 48;
	add.s64 	%rd645, %rd627, %rd653;
	// begin inline asm
	cvta.to.global.u64 %rd644, %rd645;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r782,%r783,%r784,%r785}, [%rd644];
	// end inline asm
	add.s64 	%rd648, %rd645, 16;
	// begin inline asm
	cvta.to.global.u64 %rd647, %rd648;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r786,%r787,%r788,%r789}, [%rd647];
	// end inline asm
	add.s64 	%rd651, %rd645, 32;
	// begin inline asm
	cvta.to.global.u64 %rd650, %rd651;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r790,%r791,%r792,%r793}, [%rd650];
	// end inline asm
	setp.leu.ftz.f32 	%p47, %f194, 0f00000000;
	@%p47 bra 	$L__BB0_77;

	mul.lo.s64 	%rd663, %rd51, 48;
	add.s64 	%rd664, %rd618, %rd663;
	add.s64 	%rd655, %rd664, 80;
	// begin inline asm
	cvta.to.global.u64 %rd654, %rd655;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r797,%r798,%r799,%r800}, [%rd654];
	// end inline asm
	add.s64 	%rd658, %rd664, 96;
	// begin inline asm
	cvta.to.global.u64 %rd657, %rd658;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r801,%r802,%r803,%r804}, [%rd657];
	// end inline asm
	add.s64 	%rd661, %rd664, 112;
	// begin inline asm
	cvta.to.global.u64 %rd660, %rd661;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r805,%r806,%r807,%r808}, [%rd660];
	// end inline asm
	bra.uni 	$L__BB0_77;

$L__BB0_67:
	setp.eq.s32 	%p43, %r661, 4;
	@%p43 bra 	$L__BB0_70;

	setp.ne.s32 	%p44, %r661, 1;
	@%p44 bra 	$L__BB0_77;

	// begin inline asm
	call (%rd548), _optix_get_static_transform_from_handle, (%rd546);
	// end inline asm
	add.s64 	%rd798, %rd548, 64;
	bra.uni 	$L__BB0_71;

$L__BB0_73:
	// begin inline asm
	call (%rd561), _optix_get_srt_motion_transform_from_handle, (%rd546);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd563, %rd561;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r675,%r676,%r677,%r678}, [%rd563];
	// end inline asm
	add.s64 	%rd567, %rd561, 16;
	// begin inline asm
	cvta.to.global.u64 %rd566, %rd567;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r679,%r680,%r681,%r682}, [%rd566];
	// end inline asm
	add.s64 	%rd570, %rd561, 32;
	// begin inline asm
	cvta.to.global.u64 %rd569, %rd570;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r683,%r684,%r685,%r686}, [%rd569];
	// end inline asm
	add.s64 	%rd573, %rd561, 48;
	// begin inline asm
	cvta.to.global.u64 %rd572, %rd573;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r687,%r688,%r689,%r690}, [%rd572];
	// end inline asm
	add.s64 	%rd576, %rd561, 64;
	// begin inline asm
	cvta.to.global.u64 %rd575, %rd576;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r691,%r692,%r693,%r694}, [%rd575];
	// end inline asm
	add.s64 	%rd579, %rd561, 80;
	// begin inline asm
	cvta.to.global.u64 %rd578, %rd579;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r695,%r696,%r697,%r698}, [%rd578];
	// end inline asm
	add.s64 	%rd582, %rd561, 96;
	// begin inline asm
	cvta.to.global.u64 %rd581, %rd582;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r699,%r700,%r701,%r702}, [%rd581];
	// end inline asm
	add.s64 	%rd585, %rd561, 112;
	// begin inline asm
	cvta.to.global.u64 %rd584, %rd585;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r703,%r704,%r705,%r706}, [%rd584];
	// end inline asm
	add.s64 	%rd588, %rd561, 128;
	// begin inline asm
	cvta.to.global.u64 %rd587, %rd588;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r707,%r708,%r709,%r710}, [%rd587];
	// end inline asm
	add.s64 	%rd591, %rd561, 144;
	// begin inline asm
	cvta.to.global.u64 %rd590, %rd591;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r711,%r712,%r713,%r714}, [%rd590];
	// end inline asm
	mov.b32 	%f171, %r678;
	mov.b32 	%f172, %r679;
	and.b32  	%r731, %r677, 65535;
	add.s32 	%r732, %r731, -1;
	cvt.rn.f32.s32 	%f173, %r732;
	sub.ftz.f32 	%f174, %f170, %f171;
	mul.ftz.f32 	%f175, %f174, %f173;
	sub.ftz.f32 	%f176, %f172, %f171;
	div.approx.ftz.f32 	%f177, %f175, %f176;
	min.ftz.f32 	%f178, %f173, %f177;
	max.ftz.f32 	%f180, %f191, %f178;
	cvt.rmi.ftz.f32.f32 	%f181, %f180;
	sub.ftz.f32 	%f182, %f180, %f181;
	cvt.rzi.ftz.s32.f32 	%r733, %f181;
	mul.wide.s32 	%rd605, %r733, 64;
	add.s64 	%rd594, %rd570, %rd605;
	// begin inline asm
	cvta.to.global.u64 %rd593, %rd594;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r715,%r716,%r717,%r718}, [%rd593];
	// end inline asm
	add.s64 	%rd597, %rd594, 16;
	// begin inline asm
	cvta.to.global.u64 %rd596, %rd597;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r719,%r720,%r721,%r722}, [%rd596];
	// end inline asm
	add.s64 	%rd600, %rd594, 32;
	// begin inline asm
	cvta.to.global.u64 %rd599, %rd600;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r723,%r724,%r725,%r726}, [%rd599];
	// end inline asm
	add.s64 	%rd603, %rd594, 48;
	// begin inline asm
	cvta.to.global.u64 %rd602, %rd603;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r727,%r728,%r729,%r730}, [%rd602];
	// end inline asm
	setp.leu.ftz.f32 	%p46, %f182, 0f00000000;
	@%p46 bra 	$L__BB0_77;

	add.s64 	%rd607, %rd594, 64;
	// begin inline asm
	cvta.to.global.u64 %rd606, %rd607;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r734,%r735,%r736,%r737}, [%rd606];
	// end inline asm
	add.s64 	%rd610, %rd597, 64;
	// begin inline asm
	cvta.to.global.u64 %rd609, %rd610;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r738,%r739,%r740,%r741}, [%rd609];
	// end inline asm
	add.s64 	%rd613, %rd600, 64;
	// begin inline asm
	cvta.to.global.u64 %rd612, %rd613;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r742,%r743,%r744,%r745}, [%rd612];
	// end inline asm
	add.s64 	%rd616, %rd603, 64;
	// begin inline asm
	cvta.to.global.u64 %rd615, %rd616;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r746,%r747,%r748,%r749}, [%rd615];
	// end inline asm
	bra.uni 	$L__BB0_77;

$L__BB0_70:
	// begin inline asm
	call (%rd798), _optix_get_instance_inverse_transform_from_handle, (%rd546);
	// end inline asm

$L__BB0_71:
	// begin inline asm
	cvta.to.global.u64 %rd552, %rd798;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r663,%r664,%r665,%r666}, [%rd552];
	// end inline asm
	add.s64 	%rd556, %rd798, 16;
	// begin inline asm
	cvta.to.global.u64 %rd555, %rd556;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r667,%r668,%r669,%r670}, [%rd555];
	// end inline asm
	add.s64 	%rd559, %rd798, 32;
	// begin inline asm
	cvta.to.global.u64 %rd558, %rd559;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r671,%r672,%r673,%r674}, [%rd558];
	// end inline asm

$L__BB0_77:
	add.s32 	%r983, %r983, 1;
	setp.lt.u32 	%p48, %r983, %r658;
	@%p48 bra 	$L__BB0_66;

$L__BB0_78:
	// begin inline asm
	call (%r810), _optix_get_transform_list_size, ();
	// end inline asm
	setp.eq.s32 	%p49, %r810, 0;
	@%p49 bra 	$L__BB0_93;

	// begin inline asm
	call (%r811), _optix_get_transform_list_size, ();
	// end inline asm
	// begin inline asm
	call (%f195), _optix_get_ray_time, ();
	// end inline asm
	setp.eq.s32 	%p50, %r811, 0;
	@%p50 bra 	$L__BB0_93;

	mov.u32 	%r984, 0;
	mov.f32 	%f216, 0f00000000;

$L__BB0_81:
	.pragma "nounroll";
	// begin inline asm
	call (%rd665), _optix_get_transform_list_handle, (%r984);
	// end inline asm
	// begin inline asm
	call (%r814), _optix_get_transform_type_from_handle, (%rd665);
	// end inline asm
	or.b32  	%r815, %r814, 1;
	setp.eq.s32 	%p51, %r815, 3;
	@%p51 bra 	$L__BB0_87;
	bra.uni 	$L__BB0_82;

$L__BB0_87:
	setp.eq.s32 	%p54, %r814, 2;
	@%p54 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_88;

$L__BB0_90:
	// begin inline asm
	call (%rd737), _optix_get_matrix_motion_transform_from_handle, (%rd665);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd739, %rd737;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r903,%r904,%r905,%r906}, [%rd739];
	// end inline asm
	add.s64 	%rd743, %rd737, 16;
	// begin inline asm
	cvta.to.global.u64 %rd742, %rd743;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r907,%r908,%r909,%r910}, [%rd742];
	// end inline asm
	add.s64 	%rd746, %rd737, 32;
	// begin inline asm
	cvta.to.global.u64 %rd745, %rd746;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r911,%r912,%r913,%r914}, [%rd745];
	// end inline asm
	add.s64 	%rd749, %rd737, 48;
	// begin inline asm
	cvta.to.global.u64 %rd748, %rd749;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r915,%r916,%r917,%r918}, [%rd748];
	// end inline asm
	add.s64 	%rd752, %rd737, 64;
	// begin inline asm
	cvta.to.global.u64 %rd751, %rd752;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r919,%r920,%r921,%r922}, [%rd751];
	// end inline asm
	add.s64 	%rd755, %rd737, 80;
	// begin inline asm
	cvta.to.global.u64 %rd754, %rd755;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r923,%r924,%r925,%r926}, [%rd754];
	// end inline asm
	add.s64 	%rd758, %rd737, 96;
	// begin inline asm
	cvta.to.global.u64 %rd757, %rd758;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r927,%r928,%r929,%r930}, [%rd757];
	// end inline asm
	add.s64 	%rd761, %rd737, 112;
	// begin inline asm
	cvta.to.global.u64 %rd760, %rd761;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r931,%r932,%r933,%r934}, [%rd760];
	// end inline asm
	mov.b32 	%f208, %r906;
	mov.b32 	%f209, %r907;
	and.b32  	%r947, %r905, 65535;
	add.s32 	%r948, %r947, -1;
	cvt.rn.f32.s32 	%f210, %r948;
	sub.ftz.f32 	%f211, %f195, %f208;
	mul.ftz.f32 	%f212, %f211, %f210;
	sub.ftz.f32 	%f213, %f209, %f208;
	div.approx.ftz.f32 	%f214, %f212, %f213;
	min.ftz.f32 	%f215, %f210, %f214;
	max.ftz.f32 	%f217, %f216, %f215;
	cvt.rmi.ftz.f32.f32 	%f218, %f217;
	sub.ftz.f32 	%f219, %f217, %f218;
	cvt.rzi.ftz.s32.f32 	%r949, %f218;
	cvt.s64.s32 	%rd61, %r949;
	mul.wide.s32 	%rd772, %r949, 48;
	add.s64 	%rd764, %rd746, %rd772;
	// begin inline asm
	cvta.to.global.u64 %rd763, %rd764;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r935,%r936,%r937,%r938}, [%rd763];
	// end inline asm
	add.s64 	%rd767, %rd764, 16;
	// begin inline asm
	cvta.to.global.u64 %rd766, %rd767;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r939,%r940,%r941,%r942}, [%rd766];
	// end inline asm
	add.s64 	%rd770, %rd764, 32;
	// begin inline asm
	cvta.to.global.u64 %rd769, %rd770;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r943,%r944,%r945,%r946}, [%rd769];
	// end inline asm
	setp.leu.ftz.f32 	%p56, %f219, 0f00000000;
	@%p56 bra 	$L__BB0_92;

	mul.lo.s64 	%rd782, %rd61, 48;
	add.s64 	%rd783, %rd737, %rd782;
	add.s64 	%rd774, %rd783, 80;
	// begin inline asm
	cvta.to.global.u64 %rd773, %rd774;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r950,%r951,%r952,%r953}, [%rd773];
	// end inline asm
	add.s64 	%rd777, %rd783, 96;
	// begin inline asm
	cvta.to.global.u64 %rd776, %rd777;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r954,%r955,%r956,%r957}, [%rd776];
	// end inline asm
	add.s64 	%rd780, %rd783, 112;
	// begin inline asm
	cvta.to.global.u64 %rd779, %rd780;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r958,%r959,%r960,%r961}, [%rd779];
	// end inline asm
	bra.uni 	$L__BB0_92;

$L__BB0_82:
	setp.eq.s32 	%p52, %r814, 4;
	@%p52 bra 	$L__BB0_85;

	setp.ne.s32 	%p53, %r814, 1;
	@%p53 bra 	$L__BB0_92;

	// begin inline asm
	call (%rd667), _optix_get_static_transform_from_handle, (%rd665);
	// end inline asm
	add.s64 	%rd799, %rd667, 64;
	bra.uni 	$L__BB0_86;

$L__BB0_88:
	// begin inline asm
	call (%rd680), _optix_get_srt_motion_transform_from_handle, (%rd665);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd682, %rd680;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r828,%r829,%r830,%r831}, [%rd682];
	// end inline asm
	add.s64 	%rd686, %rd680, 16;
	// begin inline asm
	cvta.to.global.u64 %rd685, %rd686;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r832,%r833,%r834,%r835}, [%rd685];
	// end inline asm
	add.s64 	%rd689, %rd680, 32;
	// begin inline asm
	cvta.to.global.u64 %rd688, %rd689;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r836,%r837,%r838,%r839}, [%rd688];
	// end inline asm
	add.s64 	%rd692, %rd680, 48;
	// begin inline asm
	cvta.to.global.u64 %rd691, %rd692;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r840,%r841,%r842,%r843}, [%rd691];
	// end inline asm
	add.s64 	%rd695, %rd680, 64;
	// begin inline asm
	cvta.to.global.u64 %rd694, %rd695;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r844,%r845,%r846,%r847}, [%rd694];
	// end inline asm
	add.s64 	%rd698, %rd680, 80;
	// begin inline asm
	cvta.to.global.u64 %rd697, %rd698;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r848,%r849,%r850,%r851}, [%rd697];
	// end inline asm
	add.s64 	%rd701, %rd680, 96;
	// begin inline asm
	cvta.to.global.u64 %rd700, %rd701;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r852,%r853,%r854,%r855}, [%rd700];
	// end inline asm
	add.s64 	%rd704, %rd680, 112;
	// begin inline asm
	cvta.to.global.u64 %rd703, %rd704;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r856,%r857,%r858,%r859}, [%rd703];
	// end inline asm
	add.s64 	%rd707, %rd680, 128;
	// begin inline asm
	cvta.to.global.u64 %rd706, %rd707;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r860,%r861,%r862,%r863}, [%rd706];
	// end inline asm
	add.s64 	%rd710, %rd680, 144;
	// begin inline asm
	cvta.to.global.u64 %rd709, %rd710;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r864,%r865,%r866,%r867}, [%rd709];
	// end inline asm
	mov.b32 	%f196, %r831;
	mov.b32 	%f197, %r832;
	and.b32  	%r884, %r830, 65535;
	add.s32 	%r885, %r884, -1;
	cvt.rn.f32.s32 	%f198, %r885;
	sub.ftz.f32 	%f199, %f195, %f196;
	mul.ftz.f32 	%f200, %f199, %f198;
	sub.ftz.f32 	%f201, %f197, %f196;
	div.approx.ftz.f32 	%f202, %f200, %f201;
	min.ftz.f32 	%f203, %f198, %f202;
	max.ftz.f32 	%f205, %f216, %f203;
	cvt.rmi.ftz.f32.f32 	%f206, %f205;
	sub.ftz.f32 	%f207, %f205, %f206;
	cvt.rzi.ftz.s32.f32 	%r886, %f206;
	mul.wide.s32 	%rd724, %r886, 64;
	add.s64 	%rd713, %rd689, %rd724;
	// begin inline asm
	cvta.to.global.u64 %rd712, %rd713;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r868,%r869,%r870,%r871}, [%rd712];
	// end inline asm
	add.s64 	%rd716, %rd713, 16;
	// begin inline asm
	cvta.to.global.u64 %rd715, %rd716;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r872,%r873,%r874,%r875}, [%rd715];
	// end inline asm
	add.s64 	%rd719, %rd713, 32;
	// begin inline asm
	cvta.to.global.u64 %rd718, %rd719;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r876,%r877,%r878,%r879}, [%rd718];
	// end inline asm
	add.s64 	%rd722, %rd713, 48;
	// begin inline asm
	cvta.to.global.u64 %rd721, %rd722;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r880,%r881,%r882,%r883}, [%rd721];
	// end inline asm
	setp.leu.ftz.f32 	%p55, %f207, 0f00000000;
	@%p55 bra 	$L__BB0_92;

	add.s64 	%rd726, %rd713, 64;
	// begin inline asm
	cvta.to.global.u64 %rd725, %rd726;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r887,%r888,%r889,%r890}, [%rd725];
	// end inline asm
	add.s64 	%rd729, %rd716, 64;
	// begin inline asm
	cvta.to.global.u64 %rd728, %rd729;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r891,%r892,%r893,%r894}, [%rd728];
	// end inline asm
	add.s64 	%rd732, %rd719, 64;
	// begin inline asm
	cvta.to.global.u64 %rd731, %rd732;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r895,%r896,%r897,%r898}, [%rd731];
	// end inline asm
	add.s64 	%rd735, %rd722, 64;
	// begin inline asm
	cvta.to.global.u64 %rd734, %rd735;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r899,%r900,%r901,%r902}, [%rd734];
	// end inline asm
	bra.uni 	$L__BB0_92;

$L__BB0_85:
	// begin inline asm
	call (%rd799), _optix_get_instance_inverse_transform_from_handle, (%rd665);
	// end inline asm

$L__BB0_86:
	// begin inline asm
	cvta.to.global.u64 %rd671, %rd799;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r816,%r817,%r818,%r819}, [%rd671];
	// end inline asm
	add.s64 	%rd675, %rd799, 16;
	// begin inline asm
	cvta.to.global.u64 %rd674, %rd675;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r820,%r821,%r822,%r823}, [%rd674];
	// end inline asm
	add.s64 	%rd678, %rd799, 32;
	// begin inline asm
	cvta.to.global.u64 %rd677, %rd678;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r824,%r825,%r826,%r827}, [%rd677];
	// end inline asm

$L__BB0_92:
	add.s32 	%r984, %r984, 1;
	setp.lt.u32 	%p57, %r984, %r811;
	@%p57 bra 	$L__BB0_81;
	bra.uni 	$L__BB0_93;

$L__BB0_33:
	// begin inline asm
	call (%r349), _optix_get_transform_list_size, ();
	// end inline asm
	setp.eq.s32 	%p22, %r349, 0;
	@%p22 bra 	$L__BB0_48;

	// begin inline asm
	call (%r350), _optix_get_transform_list_size, ();
	// end inline asm
	// begin inline asm
	call (%f107), _optix_get_ray_time, ();
	// end inline asm
	setp.eq.s32 	%p23, %r350, 0;
	@%p23 bra 	$L__BB0_48;

	mov.u32 	%r981, 0;
	mov.f32 	%f128, 0f00000000;

$L__BB0_36:
	.pragma "nounroll";
	// begin inline asm
	call (%rd306), _optix_get_transform_list_handle, (%r981);
	// end inline asm
	// begin inline asm
	call (%r353), _optix_get_transform_type_from_handle, (%rd306);
	// end inline asm
	or.b32  	%r354, %r353, 1;
	setp.eq.s32 	%p24, %r354, 3;
	@%p24 bra 	$L__BB0_42;
	bra.uni 	$L__BB0_37;

$L__BB0_42:
	setp.eq.s32 	%p27, %r353, 2;
	@%p27 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_43;

$L__BB0_45:
	// begin inline asm
	call (%rd378), _optix_get_matrix_motion_transform_from_handle, (%rd306);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd380, %rd378;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r442,%r443,%r444,%r445}, [%rd380];
	// end inline asm
	add.s64 	%rd384, %rd378, 16;
	// begin inline asm
	cvta.to.global.u64 %rd383, %rd384;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r446,%r447,%r448,%r449}, [%rd383];
	// end inline asm
	add.s64 	%rd387, %rd378, 32;
	// begin inline asm
	cvta.to.global.u64 %rd386, %rd387;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r450,%r451,%r452,%r453}, [%rd386];
	// end inline asm
	add.s64 	%rd390, %rd378, 48;
	// begin inline asm
	cvta.to.global.u64 %rd389, %rd390;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r454,%r455,%r456,%r457}, [%rd389];
	// end inline asm
	add.s64 	%rd393, %rd378, 64;
	// begin inline asm
	cvta.to.global.u64 %rd392, %rd393;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r458,%r459,%r460,%r461}, [%rd392];
	// end inline asm
	add.s64 	%rd396, %rd378, 80;
	// begin inline asm
	cvta.to.global.u64 %rd395, %rd396;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r462,%r463,%r464,%r465}, [%rd395];
	// end inline asm
	add.s64 	%rd399, %rd378, 96;
	// begin inline asm
	cvta.to.global.u64 %rd398, %rd399;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r466,%r467,%r468,%r469}, [%rd398];
	// end inline asm
	add.s64 	%rd402, %rd378, 112;
	// begin inline asm
	cvta.to.global.u64 %rd401, %rd402;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r470,%r471,%r472,%r473}, [%rd401];
	// end inline asm
	mov.b32 	%f120, %r445;
	mov.b32 	%f121, %r446;
	and.b32  	%r486, %r444, 65535;
	add.s32 	%r487, %r486, -1;
	cvt.rn.f32.s32 	%f122, %r487;
	sub.ftz.f32 	%f123, %f107, %f120;
	mul.ftz.f32 	%f124, %f123, %f122;
	sub.ftz.f32 	%f125, %f121, %f120;
	div.approx.ftz.f32 	%f126, %f124, %f125;
	min.ftz.f32 	%f127, %f122, %f126;
	max.ftz.f32 	%f129, %f128, %f127;
	cvt.rmi.ftz.f32.f32 	%f130, %f129;
	sub.ftz.f32 	%f131, %f129, %f130;
	cvt.rzi.ftz.s32.f32 	%r488, %f130;
	cvt.s64.s32 	%rd31, %r488;
	mul.wide.s32 	%rd413, %r488, 48;
	add.s64 	%rd405, %rd387, %rd413;
	// begin inline asm
	cvta.to.global.u64 %rd404, %rd405;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r474,%r475,%r476,%r477}, [%rd404];
	// end inline asm
	add.s64 	%rd408, %rd405, 16;
	// begin inline asm
	cvta.to.global.u64 %rd407, %rd408;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r478,%r479,%r480,%r481}, [%rd407];
	// end inline asm
	add.s64 	%rd411, %rd405, 32;
	// begin inline asm
	cvta.to.global.u64 %rd410, %rd411;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r482,%r483,%r484,%r485}, [%rd410];
	// end inline asm
	setp.leu.ftz.f32 	%p29, %f131, 0f00000000;
	@%p29 bra 	$L__BB0_47;

	mul.lo.s64 	%rd423, %rd31, 48;
	add.s64 	%rd424, %rd378, %rd423;
	add.s64 	%rd415, %rd424, 80;
	// begin inline asm
	cvta.to.global.u64 %rd414, %rd415;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r489,%r490,%r491,%r492}, [%rd414];
	// end inline asm
	add.s64 	%rd418, %rd424, 96;
	// begin inline asm
	cvta.to.global.u64 %rd417, %rd418;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r493,%r494,%r495,%r496}, [%rd417];
	// end inline asm
	add.s64 	%rd421, %rd424, 112;
	// begin inline asm
	cvta.to.global.u64 %rd420, %rd421;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r497,%r498,%r499,%r500}, [%rd420];
	// end inline asm
	bra.uni 	$L__BB0_47;

$L__BB0_37:
	setp.eq.s32 	%p25, %r353, 4;
	@%p25 bra 	$L__BB0_40;

	setp.ne.s32 	%p26, %r353, 1;
	@%p26 bra 	$L__BB0_47;

	// begin inline asm
	call (%rd308), _optix_get_static_transform_from_handle, (%rd306);
	// end inline asm
	add.s64 	%rd796, %rd308, 64;
	bra.uni 	$L__BB0_41;

$L__BB0_43:
	// begin inline asm
	call (%rd321), _optix_get_srt_motion_transform_from_handle, (%rd306);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd323, %rd321;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r367,%r368,%r369,%r370}, [%rd323];
	// end inline asm
	add.s64 	%rd327, %rd321, 16;
	// begin inline asm
	cvta.to.global.u64 %rd326, %rd327;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r371,%r372,%r373,%r374}, [%rd326];
	// end inline asm
	add.s64 	%rd330, %rd321, 32;
	// begin inline asm
	cvta.to.global.u64 %rd329, %rd330;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r375,%r376,%r377,%r378}, [%rd329];
	// end inline asm
	add.s64 	%rd333, %rd321, 48;
	// begin inline asm
	cvta.to.global.u64 %rd332, %rd333;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r379,%r380,%r381,%r382}, [%rd332];
	// end inline asm
	add.s64 	%rd336, %rd321, 64;
	// begin inline asm
	cvta.to.global.u64 %rd335, %rd336;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r383,%r384,%r385,%r386}, [%rd335];
	// end inline asm
	add.s64 	%rd339, %rd321, 80;
	// begin inline asm
	cvta.to.global.u64 %rd338, %rd339;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r387,%r388,%r389,%r390}, [%rd338];
	// end inline asm
	add.s64 	%rd342, %rd321, 96;
	// begin inline asm
	cvta.to.global.u64 %rd341, %rd342;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r391,%r392,%r393,%r394}, [%rd341];
	// end inline asm
	add.s64 	%rd345, %rd321, 112;
	// begin inline asm
	cvta.to.global.u64 %rd344, %rd345;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r395,%r396,%r397,%r398}, [%rd344];
	// end inline asm
	add.s64 	%rd348, %rd321, 128;
	// begin inline asm
	cvta.to.global.u64 %rd347, %rd348;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r399,%r400,%r401,%r402}, [%rd347];
	// end inline asm
	add.s64 	%rd351, %rd321, 144;
	// begin inline asm
	cvta.to.global.u64 %rd350, %rd351;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r403,%r404,%r405,%r406}, [%rd350];
	// end inline asm
	mov.b32 	%f108, %r370;
	mov.b32 	%f109, %r371;
	and.b32  	%r423, %r369, 65535;
	add.s32 	%r424, %r423, -1;
	cvt.rn.f32.s32 	%f110, %r424;
	sub.ftz.f32 	%f111, %f107, %f108;
	mul.ftz.f32 	%f112, %f111, %f110;
	sub.ftz.f32 	%f113, %f109, %f108;
	div.approx.ftz.f32 	%f114, %f112, %f113;
	min.ftz.f32 	%f115, %f110, %f114;
	max.ftz.f32 	%f117, %f128, %f115;
	cvt.rmi.ftz.f32.f32 	%f118, %f117;
	sub.ftz.f32 	%f119, %f117, %f118;
	cvt.rzi.ftz.s32.f32 	%r425, %f118;
	mul.wide.s32 	%rd365, %r425, 64;
	add.s64 	%rd354, %rd330, %rd365;
	// begin inline asm
	cvta.to.global.u64 %rd353, %rd354;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r407,%r408,%r409,%r410}, [%rd353];
	// end inline asm
	add.s64 	%rd357, %rd354, 16;
	// begin inline asm
	cvta.to.global.u64 %rd356, %rd357;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r411,%r412,%r413,%r414}, [%rd356];
	// end inline asm
	add.s64 	%rd360, %rd354, 32;
	// begin inline asm
	cvta.to.global.u64 %rd359, %rd360;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r415,%r416,%r417,%r418}, [%rd359];
	// end inline asm
	add.s64 	%rd363, %rd354, 48;
	// begin inline asm
	cvta.to.global.u64 %rd362, %rd363;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r419,%r420,%r421,%r422}, [%rd362];
	// end inline asm
	setp.leu.ftz.f32 	%p28, %f119, 0f00000000;
	@%p28 bra 	$L__BB0_47;

	add.s64 	%rd367, %rd354, 64;
	// begin inline asm
	cvta.to.global.u64 %rd366, %rd367;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r426,%r427,%r428,%r429}, [%rd366];
	// end inline asm
	add.s64 	%rd370, %rd357, 64;
	// begin inline asm
	cvta.to.global.u64 %rd369, %rd370;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r430,%r431,%r432,%r433}, [%rd369];
	// end inline asm
	add.s64 	%rd373, %rd360, 64;
	// begin inline asm
	cvta.to.global.u64 %rd372, %rd373;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r434,%r435,%r436,%r437}, [%rd372];
	// end inline asm
	add.s64 	%rd376, %rd363, 64;
	// begin inline asm
	cvta.to.global.u64 %rd375, %rd376;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r438,%r439,%r440,%r441}, [%rd375];
	// end inline asm
	bra.uni 	$L__BB0_47;

$L__BB0_40:
	// begin inline asm
	call (%rd796), _optix_get_instance_inverse_transform_from_handle, (%rd306);
	// end inline asm

$L__BB0_41:
	// begin inline asm
	cvta.to.global.u64 %rd312, %rd796;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r355,%r356,%r357,%r358}, [%rd312];
	// end inline asm
	add.s64 	%rd316, %rd796, 16;
	// begin inline asm
	cvta.to.global.u64 %rd315, %rd316;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r359,%r360,%r361,%r362}, [%rd315];
	// end inline asm
	add.s64 	%rd319, %rd796, 32;
	// begin inline asm
	cvta.to.global.u64 %rd318, %rd319;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r363,%r364,%r365,%r366}, [%rd318];
	// end inline asm

$L__BB0_47:
	add.s32 	%r981, %r981, 1;
	setp.lt.u32 	%p30, %r981, %r350;
	@%p30 bra 	$L__BB0_36;

$L__BB0_48:
	// begin inline asm
	call (%r502), _optix_get_transform_list_size, ();
	// end inline asm
	setp.eq.s32 	%p31, %r502, 0;
	@%p31 bra 	$L__BB0_93;

	// begin inline asm
	call (%r503), _optix_get_transform_list_size, ();
	// end inline asm
	// begin inline asm
	call (%f132), _optix_get_ray_time, ();
	// end inline asm
	setp.eq.s32 	%p32, %r503, 0;
	@%p32 bra 	$L__BB0_93;

	mov.u32 	%r982, 0;
	mov.f32 	%f153, 0f00000000;

$L__BB0_51:
	.pragma "nounroll";
	// begin inline asm
	call (%rd425), _optix_get_transform_list_handle, (%r982);
	// end inline asm
	// begin inline asm
	call (%r506), _optix_get_transform_type_from_handle, (%rd425);
	// end inline asm
	or.b32  	%r507, %r506, 1;
	setp.eq.s32 	%p33, %r507, 3;
	@%p33 bra 	$L__BB0_57;
	bra.uni 	$L__BB0_52;

$L__BB0_57:
	setp.eq.s32 	%p36, %r506, 2;
	@%p36 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_58;

$L__BB0_60:
	// begin inline asm
	call (%rd497), _optix_get_matrix_motion_transform_from_handle, (%rd425);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd499, %rd497;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r595,%r596,%r597,%r598}, [%rd499];
	// end inline asm
	add.s64 	%rd503, %rd497, 16;
	// begin inline asm
	cvta.to.global.u64 %rd502, %rd503;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r599,%r600,%r601,%r602}, [%rd502];
	// end inline asm
	add.s64 	%rd506, %rd497, 32;
	// begin inline asm
	cvta.to.global.u64 %rd505, %rd506;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r603,%r604,%r605,%r606}, [%rd505];
	// end inline asm
	add.s64 	%rd509, %rd497, 48;
	// begin inline asm
	cvta.to.global.u64 %rd508, %rd509;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r607,%r608,%r609,%r610}, [%rd508];
	// end inline asm
	add.s64 	%rd512, %rd497, 64;
	// begin inline asm
	cvta.to.global.u64 %rd511, %rd512;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r611,%r612,%r613,%r614}, [%rd511];
	// end inline asm
	add.s64 	%rd515, %rd497, 80;
	// begin inline asm
	cvta.to.global.u64 %rd514, %rd515;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r615,%r616,%r617,%r618}, [%rd514];
	// end inline asm
	add.s64 	%rd518, %rd497, 96;
	// begin inline asm
	cvta.to.global.u64 %rd517, %rd518;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r619,%r620,%r621,%r622}, [%rd517];
	// end inline asm
	add.s64 	%rd521, %rd497, 112;
	// begin inline asm
	cvta.to.global.u64 %rd520, %rd521;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r623,%r624,%r625,%r626}, [%rd520];
	// end inline asm
	mov.b32 	%f145, %r598;
	mov.b32 	%f146, %r599;
	and.b32  	%r639, %r597, 65535;
	add.s32 	%r640, %r639, -1;
	cvt.rn.f32.s32 	%f147, %r640;
	sub.ftz.f32 	%f148, %f132, %f145;
	mul.ftz.f32 	%f149, %f148, %f147;
	sub.ftz.f32 	%f150, %f146, %f145;
	div.approx.ftz.f32 	%f151, %f149, %f150;
	min.ftz.f32 	%f152, %f147, %f151;
	max.ftz.f32 	%f154, %f153, %f152;
	cvt.rmi.ftz.f32.f32 	%f155, %f154;
	sub.ftz.f32 	%f156, %f154, %f155;
	cvt.rzi.ftz.s32.f32 	%r641, %f155;
	cvt.s64.s32 	%rd41, %r641;
	mul.wide.s32 	%rd532, %r641, 48;
	add.s64 	%rd524, %rd506, %rd532;
	// begin inline asm
	cvta.to.global.u64 %rd523, %rd524;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r627,%r628,%r629,%r630}, [%rd523];
	// end inline asm
	add.s64 	%rd527, %rd524, 16;
	// begin inline asm
	cvta.to.global.u64 %rd526, %rd527;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r631,%r632,%r633,%r634}, [%rd526];
	// end inline asm
	add.s64 	%rd530, %rd524, 32;
	// begin inline asm
	cvta.to.global.u64 %rd529, %rd530;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r635,%r636,%r637,%r638}, [%rd529];
	// end inline asm
	setp.leu.ftz.f32 	%p38, %f156, 0f00000000;
	@%p38 bra 	$L__BB0_62;

	mul.lo.s64 	%rd542, %rd41, 48;
	add.s64 	%rd543, %rd497, %rd542;
	add.s64 	%rd534, %rd543, 80;
	// begin inline asm
	cvta.to.global.u64 %rd533, %rd534;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r642,%r643,%r644,%r645}, [%rd533];
	// end inline asm
	add.s64 	%rd537, %rd543, 96;
	// begin inline asm
	cvta.to.global.u64 %rd536, %rd537;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r646,%r647,%r648,%r649}, [%rd536];
	// end inline asm
	add.s64 	%rd540, %rd543, 112;
	// begin inline asm
	cvta.to.global.u64 %rd539, %rd540;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r650,%r651,%r652,%r653}, [%rd539];
	// end inline asm
	bra.uni 	$L__BB0_62;

$L__BB0_52:
	setp.eq.s32 	%p34, %r506, 4;
	@%p34 bra 	$L__BB0_55;

	setp.ne.s32 	%p35, %r506, 1;
	@%p35 bra 	$L__BB0_62;

	// begin inline asm
	call (%rd427), _optix_get_static_transform_from_handle, (%rd425);
	// end inline asm
	add.s64 	%rd797, %rd427, 64;
	bra.uni 	$L__BB0_56;

$L__BB0_58:
	// begin inline asm
	call (%rd440), _optix_get_srt_motion_transform_from_handle, (%rd425);
	// end inline asm
	// begin inline asm
	cvta.to.global.u64 %rd442, %rd440;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r520,%r521,%r522,%r523}, [%rd442];
	// end inline asm
	add.s64 	%rd446, %rd440, 16;
	// begin inline asm
	cvta.to.global.u64 %rd445, %rd446;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r524,%r525,%r526,%r527}, [%rd445];
	// end inline asm
	add.s64 	%rd449, %rd440, 32;
	// begin inline asm
	cvta.to.global.u64 %rd448, %rd449;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r528,%r529,%r530,%r531}, [%rd448];
	// end inline asm
	add.s64 	%rd452, %rd440, 48;
	// begin inline asm
	cvta.to.global.u64 %rd451, %rd452;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r532,%r533,%r534,%r535}, [%rd451];
	// end inline asm
	add.s64 	%rd455, %rd440, 64;
	// begin inline asm
	cvta.to.global.u64 %rd454, %rd455;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r536,%r537,%r538,%r539}, [%rd454];
	// end inline asm
	add.s64 	%rd458, %rd440, 80;
	// begin inline asm
	cvta.to.global.u64 %rd457, %rd458;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r540,%r541,%r542,%r543}, [%rd457];
	// end inline asm
	add.s64 	%rd461, %rd440, 96;
	// begin inline asm
	cvta.to.global.u64 %rd460, %rd461;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r544,%r545,%r546,%r547}, [%rd460];
	// end inline asm
	add.s64 	%rd464, %rd440, 112;
	// begin inline asm
	cvta.to.global.u64 %rd463, %rd464;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r548,%r549,%r550,%r551}, [%rd463];
	// end inline asm
	add.s64 	%rd467, %rd440, 128;
	// begin inline asm
	cvta.to.global.u64 %rd466, %rd467;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r552,%r553,%r554,%r555}, [%rd466];
	// end inline asm
	add.s64 	%rd470, %rd440, 144;
	// begin inline asm
	cvta.to.global.u64 %rd469, %rd470;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r556,%r557,%r558,%r559}, [%rd469];
	// end inline asm
	mov.b32 	%f133, %r523;
	mov.b32 	%f134, %r524;
	and.b32  	%r576, %r522, 65535;
	add.s32 	%r577, %r576, -1;
	cvt.rn.f32.s32 	%f135, %r577;
	sub.ftz.f32 	%f136, %f132, %f133;
	mul.ftz.f32 	%f137, %f136, %f135;
	sub.ftz.f32 	%f138, %f134, %f133;
	div.approx.ftz.f32 	%f139, %f137, %f138;
	min.ftz.f32 	%f140, %f135, %f139;
	max.ftz.f32 	%f142, %f153, %f140;
	cvt.rmi.ftz.f32.f32 	%f143, %f142;
	sub.ftz.f32 	%f144, %f142, %f143;
	cvt.rzi.ftz.s32.f32 	%r578, %f143;
	mul.wide.s32 	%rd484, %r578, 64;
	add.s64 	%rd473, %rd449, %rd484;
	// begin inline asm
	cvta.to.global.u64 %rd472, %rd473;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r560,%r561,%r562,%r563}, [%rd472];
	// end inline asm
	add.s64 	%rd476, %rd473, 16;
	// begin inline asm
	cvta.to.global.u64 %rd475, %rd476;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r564,%r565,%r566,%r567}, [%rd475];
	// end inline asm
	add.s64 	%rd479, %rd473, 32;
	// begin inline asm
	cvta.to.global.u64 %rd478, %rd479;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r568,%r569,%r570,%r571}, [%rd478];
	// end inline asm
	add.s64 	%rd482, %rd473, 48;
	// begin inline asm
	cvta.to.global.u64 %rd481, %rd482;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r572,%r573,%r574,%r575}, [%rd481];
	// end inline asm
	setp.leu.ftz.f32 	%p37, %f144, 0f00000000;
	@%p37 bra 	$L__BB0_62;

	add.s64 	%rd486, %rd473, 64;
	// begin inline asm
	cvta.to.global.u64 %rd485, %rd486;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r579,%r580,%r581,%r582}, [%rd485];
	// end inline asm
	add.s64 	%rd489, %rd476, 64;
	// begin inline asm
	cvta.to.global.u64 %rd488, %rd489;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r583,%r584,%r585,%r586}, [%rd488];
	// end inline asm
	add.s64 	%rd492, %rd479, 64;
	// begin inline asm
	cvta.to.global.u64 %rd491, %rd492;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r587,%r588,%r589,%r590}, [%rd491];
	// end inline asm
	add.s64 	%rd495, %rd482, 64;
	// begin inline asm
	cvta.to.global.u64 %rd494, %rd495;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r591,%r592,%r593,%r594}, [%rd494];
	// end inline asm
	bra.uni 	$L__BB0_62;

$L__BB0_55:
	// begin inline asm
	call (%rd797), _optix_get_instance_inverse_transform_from_handle, (%rd425);
	// end inline asm

$L__BB0_56:
	// begin inline asm
	cvta.to.global.u64 %rd431, %rd797;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r508,%r509,%r510,%r511}, [%rd431];
	// end inline asm
	add.s64 	%rd435, %rd797, 16;
	// begin inline asm
	cvta.to.global.u64 %rd434, %rd435;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r512,%r513,%r514,%r515}, [%rd434];
	// end inline asm
	add.s64 	%rd438, %rd797, 32;
	// begin inline asm
	cvta.to.global.u64 %rd437, %rd438;
	// end inline asm
	// begin inline asm
	ld.global.v4.u32 {%r516,%r517,%r518,%r519}, [%rd437];
	// end inline asm

$L__BB0_62:
	add.s32 	%r982, %r982, 1;
	setp.lt.u32 	%p39, %r982, %r503;
	@%p39 bra 	$L__BB0_51;

$L__BB0_93:
	// begin inline asm
	call (%r962), _optix_get_attribute_0, ();
	// end inline asm
	mov.b32 	%f10, %r962;
	ld.u32 	%r963, [%rd63+100];
	setp.eq.s32 	%p58, %r963, 14;
	@%p58 bra 	$L__BB0_95;
	bra.uni 	$L__BB0_94;

$L__BB0_95:
	ld.u64 	%rd784, [%rd63+24];
	mul.wide.u32 	%rd785, %r986, 8;
	add.s64 	%rd786, %rd784, %rd785;
	ld.v2.u32 	{%r986, %r985}, [%rd786];
	bra.uni 	$L__BB0_96;

$L__BB0_94:
	add.s32 	%r985, %r986, 1;

$L__BB0_96:
	ld.u32 	%r968, [%rd63+96];
	and.b32  	%r969, %r968, 1073741823;
	or.b32  	%r970, %r969, 1073741824;
	setp.lt.ftz.f32 	%p59, %f10, 0f3F000000;
	selp.b32 	%r967, %r970, %r969, %p59;
	mov.u32 	%r966, 2;
	// begin inline asm
	call _optix_set_payload, (%r966, %r967);
	// end inline asm
	ld.v4.f32 	{%f220, %f221, %f222, %f223}, [%rd63+112];
	ld.f32 	%f256, [%rd63+80];
	setp.lt.ftz.f32 	%p60, %f256, 0f00000000;
	@%p60 bra 	$L__BB0_98;
	bra.uni 	$L__BB0_97;

$L__BB0_98:
	ld.u64 	%rd787, [%rd63+8];
	mul.wide.s32 	%rd788, %r985, 12;
	add.s64 	%rd789, %rd787, %rd788;
	mul.wide.s32 	%rd790, %r986, 12;
	add.s64 	%rd791, %rd787, %rd790;
	ld.f32 	%f224, [%rd791];
	ld.f32 	%f225, [%rd789];
	sub.ftz.f32 	%f226, %f225, %f224;
	ld.f32 	%f227, [%rd791+4];
	ld.f32 	%f228, [%rd789+4];
	sub.ftz.f32 	%f229, %f228, %f227;
	ld.f32 	%f230, [%rd791+8];
	ld.f32 	%f231, [%rd789+8];
	sub.ftz.f32 	%f232, %f231, %f230;
	fma.rn.ftz.f32 	%f256, %f226, %f10, %f224;
	fma.rn.ftz.f32 	%f255, %f229, %f10, %f227;
	fma.rn.ftz.f32 	%f254, %f232, %f10, %f230;
	bra.uni 	$L__BB0_99;

$L__BB0_97:
	ld.f32 	%f255, [%rd63+84];
	ld.f32 	%f254, [%rd63+88];

$L__BB0_99:
	mov.u32 	%r972, 0;
	// begin inline asm
	call (%r971), _optix_get_payload, (%r972);
	// end inline asm
	mov.u32 	%r974, 1;
	// begin inline asm
	call (%r973), _optix_get_payload, (%r974);
	// end inline asm
	cvt.u64.u32 	%rd792, %r971;
	cvt.u64.u32 	%rd793, %r973;
	bfi.b64 	%rd62, %rd792, %rd793, 32, 32;
	mov.f32 	%f234, 0f3F800000;
	st.v4.f32 	[%rd62+48], {%f234, %f234, %f234, %f234};
	// begin inline asm
	call (%f233), _optix_get_ray_tmax, ();
	// end inline asm
	st.f32 	[%rd62+108], %f233;
	mul.ftz.f32 	%f235, %f220, %f256;
	mul.ftz.f32 	%f236, %f221, %f255;
	st.v2.f32 	[%rd62], {%f235, %f236};
	mul.ftz.f32 	%f237, %f222, %f254;
	st.f32 	[%rd62+8], %f237;
	st.v2.f32 	[%rd62+96], {%f1, %f2};
	st.f32 	[%rd62+104], %f3;
	ld.u32 	%r975, [%rd62+12];
	or.b32  	%r976, %r975, -2147483648;
	st.u32 	[%rd62+12], %r976;
	and.b32  	%r977, %r975, 16777216;
	setp.eq.s32 	%p61, %r977, 0;
	@%p61 bra 	$L__BB0_101;

	ld.f32 	%f238, [%rd62+16];
	ld.f32 	%f239, [%rd62];
	mul.ftz.f32 	%f240, %f239, %f238;
	st.f32 	[%rd62+16], %f240;
	ld.f32 	%f241, [%rd62+20];
	ld.f32 	%f242, [%rd62+4];
	mul.ftz.f32 	%f243, %f242, %f241;
	st.f32 	[%rd62+20], %f243;
	ld.f32 	%f244, [%rd62+24];
	ld.f32 	%f245, [%rd62+8];
	mul.ftz.f32 	%f246, %f245, %f244;
	st.f32 	[%rd62+24], %f246;

$L__BB0_101:
	ld.u32 	%r978, [%rd62+44];
	setp.ne.s32 	%p62, %r978, 0;
	@%p62 bra 	$L__BB0_103;

	ld.v4.f32 	{%f247, %f248, %f249, %f250}, [%rd62+128];
	st.v2.f32 	[%rd62+32], {%f247, %f248};
	st.f32 	[%rd62+40], %f249;

$L__BB0_103:
	ret;

}

