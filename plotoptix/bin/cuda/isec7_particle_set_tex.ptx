//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-30033411
// Cuda compilation tools, release 11.4, V11.4.48
// Based on NVVM 7.0.1
//

.version 7.4
.target sm_50
.address_size 64

	// .globl	__intersection__particles_tex
.const .align 8 .b8 params[288];

.visible .entry __intersection__particles_tex()
{
	.reg .pred 	%p<33>;
	.reg .f32 	%f<244>;
	.reg .b32 	%r<46>;
	.reg .b64 	%rd<24>;


	// begin inline asm
	call (%r5), _optix_read_primitive_idx, ();
	// end inline asm
	// begin inline asm
	call (%rd3), _optix_get_sbt_data_ptr_64, ();
	// end inline asm
	cvt.u64.u32 	%rd2, %r5;
	ld.u64 	%rd4, [%rd3+32];
	mul.wide.u32 	%rd5, %r5, 4;
	add.s64 	%rd6, %rd4, %rd5;
	ld.f32 	%f1, [%rd6];
	setp.eq.ftz.f32 	%p1, %f1, 0f00000000;
	@%p1 bra 	$L__BB0_16;

	ld.u64 	%rd7, [%rd3];
	mul.lo.s64 	%rd8, %rd2, 12;
	add.s64 	%rd9, %rd7, %rd8;
	ld.f32 	%f2, [%rd9];
	ld.f32 	%f3, [%rd9+4];
	ld.f32 	%f4, [%rd9+8];
	// begin inline asm
	call (%f36), _optix_get_object_ray_origin_x, ();
	// end inline asm
	// begin inline asm
	call (%f37), _optix_get_object_ray_origin_y, ();
	// end inline asm
	// begin inline asm
	call (%f38), _optix_get_object_ray_origin_z, ();
	// end inline asm
	// begin inline asm
	call (%f39), _optix_get_object_ray_direction_x, ();
	// end inline asm
	// begin inline asm
	call (%f40), _optix_get_object_ray_direction_y, ();
	// end inline asm
	// begin inline asm
	call (%f41), _optix_get_object_ray_direction_z, ();
	// end inline asm
	sub.ftz.f32 	%f42, %f36, %f2;
	sub.ftz.f32 	%f43, %f37, %f3;
	sub.ftz.f32 	%f44, %f38, %f4;
	mul.ftz.f32 	%f45, %f40, %f43;
	fma.rn.ftz.f32 	%f46, %f39, %f42, %f45;
	fma.rn.ftz.f32 	%f11, %f41, %f44, %f46;
	mul.ftz.f32 	%f47, %f43, %f43;
	fma.rn.ftz.f32 	%f48, %f42, %f42, %f47;
	fma.rn.ftz.f32 	%f49, %f44, %f44, %f48;
	mul.ftz.f32 	%f50, %f1, %f1;
	sub.ftz.f32 	%f51, %f49, %f50;
	mul.ftz.f32 	%f52, %f11, %f11;
	sub.ftz.f32 	%f12, %f52, %f51;
	setp.leu.ftz.f32 	%p2, %f12, 0f00000000;
	@%p2 bra 	$L__BB0_16;

	sqrt.approx.ftz.f32 	%f13, %f12;
	neg.ftz.f32 	%f57, %f11;
	sub.ftz.f32 	%f14, %f57, %f13;
	// begin inline asm
	call (%f55), _optix_get_ray_tmax, ();
	// end inline asm
	setp.lt.ftz.f32 	%p3, %f14, %f55;
	// begin inline asm
	call (%f56), _optix_get_ray_tmin, ();
	// end inline asm
	setp.gt.ftz.f32 	%p4, %f14, %f56;
	and.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_3;

$L__BB0_10:
	fma.rn.ftz.f32 	%f151, %f39, %f14, %f36;
	fma.rn.ftz.f32 	%f152, %f40, %f14, %f37;
	fma.rn.ftz.f32 	%f153, %f41, %f14, %f38;
	sub.ftz.f32 	%f154, %f151, %f2;
	sub.ftz.f32 	%f155, %f152, %f3;
	sub.ftz.f32 	%f156, %f153, %f4;
	mul.ftz.f32 	%f157, %f155, %f155;
	fma.rn.ftz.f32 	%f158, %f154, %f154, %f157;
	fma.rn.ftz.f32 	%f159, %f156, %f156, %f158;
	rsqrt.approx.ftz.f32 	%f160, %f159;
	mul.ftz.f32 	%f26, %f154, %f160;
	mul.ftz.f32 	%f27, %f155, %f160;
	mul.ftz.f32 	%f28, %f156, %f160;
	ld.v2.u64 	{%rd17, %rd18}, [%rd3+16];
	add.s64 	%rd22, %rd17, %rd8;
	add.s64 	%rd23, %rd18, %rd8;
	ld.f32 	%f161, [%rd23+8];
	ld.f32 	%f162, [%rd22+4];
	mul.ftz.f32 	%f163, %f162, %f161;
	ld.f32 	%f164, [%rd23+4];
	ld.f32 	%f165, [%rd22+8];
	mul.ftz.f32 	%f166, %f165, %f164;
	sub.ftz.f32 	%f167, %f163, %f166;
	ld.f32 	%f168, [%rd23];
	mul.ftz.f32 	%f169, %f165, %f168;
	ld.f32 	%f170, [%rd22];
	mul.ftz.f32 	%f171, %f170, %f161;
	sub.ftz.f32 	%f172, %f169, %f171;
	mul.ftz.f32 	%f173, %f170, %f164;
	mul.ftz.f32 	%f174, %f162, %f168;
	sub.ftz.f32 	%f175, %f173, %f174;
	mul.ftz.f32 	%f176, %f27, %f164;
	fma.rn.ftz.f32 	%f177, %f26, %f168, %f176;
	fma.rn.ftz.f32 	%f178, %f28, %f161, %f177;
	mul.ftz.f32 	%f179, %f162, %f27;
	fma.rn.ftz.f32 	%f180, %f170, %f26, %f179;
	fma.rn.ftz.f32 	%f29, %f165, %f28, %f180;
	mul.ftz.f32 	%f181, %f27, %f172;
	fma.rn.ftz.f32 	%f182, %f26, %f167, %f181;
	fma.rn.ftz.f32 	%f183, %f28, %f175, %f182;
	abs.ftz.f32 	%f30, %f178;
	abs.ftz.f32 	%f31, %f183;
	setp.eq.ftz.f32 	%p21, %f30, 0f00000000;
	setp.eq.ftz.f32 	%p22, %f31, 0f00000000;
	and.pred  	%p23, %p21, %p22;
	mov.b32 	%r3, %f178;
	mov.b32 	%r26, %f183;
	and.b32  	%r4, %r26, -2147483648;
	@%p23 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_11;

$L__BB0_14:
	shr.s32 	%r31, %r3, 31;
	and.b32  	%r32, %r31, 1078530011;
	or.b32  	%r33, %r4, %r32;
	mov.b32 	%f243, %r33;
	bra.uni 	$L__BB0_15;

$L__BB0_3:
	sub.ftz.f32 	%f15, %f13, %f11;
	// begin inline asm
	call (%f58), _optix_get_ray_tmax, ();
	// end inline asm
	setp.geu.ftz.f32 	%p6, %f15, %f58;
	// begin inline asm
	call (%f59), _optix_get_ray_tmin, ();
	// end inline asm
	setp.leu.ftz.f32 	%p7, %f15, %f59;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_16;

	fma.rn.ftz.f32 	%f60, %f39, %f15, %f36;
	fma.rn.ftz.f32 	%f61, %f40, %f15, %f37;
	fma.rn.ftz.f32 	%f62, %f41, %f15, %f38;
	sub.ftz.f32 	%f63, %f60, %f2;
	sub.ftz.f32 	%f64, %f61, %f3;
	sub.ftz.f32 	%f65, %f62, %f4;
	mul.ftz.f32 	%f66, %f64, %f64;
	fma.rn.ftz.f32 	%f67, %f63, %f63, %f66;
	fma.rn.ftz.f32 	%f68, %f65, %f65, %f67;
	rsqrt.approx.ftz.f32 	%f69, %f68;
	mul.ftz.f32 	%f16, %f63, %f69;
	mul.ftz.f32 	%f17, %f64, %f69;
	mul.ftz.f32 	%f18, %f65, %f69;
	ld.v2.u64 	{%rd10, %rd11}, [%rd3+16];
	add.s64 	%rd15, %rd10, %rd8;
	add.s64 	%rd16, %rd11, %rd8;
	ld.f32 	%f70, [%rd16+8];
	ld.f32 	%f71, [%rd15+4];
	mul.ftz.f32 	%f72, %f71, %f70;
	ld.f32 	%f73, [%rd16+4];
	ld.f32 	%f74, [%rd15+8];
	mul.ftz.f32 	%f75, %f74, %f73;
	sub.ftz.f32 	%f76, %f72, %f75;
	ld.f32 	%f77, [%rd16];
	mul.ftz.f32 	%f78, %f74, %f77;
	ld.f32 	%f79, [%rd15];
	mul.ftz.f32 	%f80, %f79, %f70;
	sub.ftz.f32 	%f81, %f78, %f80;
	mul.ftz.f32 	%f82, %f79, %f73;
	mul.ftz.f32 	%f83, %f71, %f77;
	sub.ftz.f32 	%f84, %f82, %f83;
	mul.ftz.f32 	%f85, %f17, %f73;
	fma.rn.ftz.f32 	%f86, %f16, %f77, %f85;
	fma.rn.ftz.f32 	%f87, %f18, %f70, %f86;
	mul.ftz.f32 	%f88, %f71, %f17;
	fma.rn.ftz.f32 	%f89, %f79, %f16, %f88;
	fma.rn.ftz.f32 	%f19, %f74, %f18, %f89;
	mul.ftz.f32 	%f90, %f17, %f81;
	fma.rn.ftz.f32 	%f91, %f16, %f76, %f90;
	fma.rn.ftz.f32 	%f92, %f18, %f84, %f91;
	abs.ftz.f32 	%f20, %f87;
	abs.ftz.f32 	%f21, %f92;
	setp.eq.ftz.f32 	%p9, %f20, 0f00000000;
	setp.eq.ftz.f32 	%p10, %f21, 0f00000000;
	and.pred  	%p11, %p9, %p10;
	mov.b32 	%r1, %f87;
	mov.b32 	%r6, %f92;
	and.b32  	%r2, %r6, -2147483648;
	@%p11 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_5;

$L__BB0_8:
	shr.s32 	%r11, %r1, 31;
	and.b32  	%r12, %r11, 1078530011;
	or.b32  	%r13, %r2, %r12;
	mov.b32 	%f242, %r13;
	bra.uni 	$L__BB0_9;

$L__BB0_11:
	setp.eq.ftz.f32 	%p24, %f30, 0f7F800000;
	setp.eq.ftz.f32 	%p25, %f31, 0f7F800000;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_13;
	bra.uni 	$L__BB0_12;

$L__BB0_13:
	setp.lt.s32 	%p30, %r3, 0;
	selp.b32 	%r29, 1075235812, 1061752795, %p30;
	or.b32  	%r30, %r4, %r29;
	mov.b32 	%f243, %r30;
	bra.uni 	$L__BB0_15;

$L__BB0_5:
	setp.eq.ftz.f32 	%p12, %f20, 0f7F800000;
	setp.eq.ftz.f32 	%p13, %f21, 0f7F800000;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;

$L__BB0_7:
	setp.lt.s32 	%p18, %r1, 0;
	selp.b32 	%r9, 1075235812, 1061752795, %p18;
	or.b32  	%r10, %r2, %r9;
	mov.b32 	%f242, %r10;
	bra.uni 	$L__BB0_9;

$L__BB0_12:
	setp.lt.s32 	%p27, %r3, 0;
	min.ftz.f32 	%f184, %f31, %f30;
	max.ftz.f32 	%f185, %f31, %f30;
	div.full.ftz.f32 	%f186, %f184, %f185;
	mul.rn.ftz.f32 	%f187, %f186, %f186;
	mov.f32 	%f188, 0fC0B59883;
	mov.f32 	%f189, 0fBF52C7EA;
	fma.rn.ftz.f32 	%f190, %f187, %f189, %f188;
	mov.f32 	%f191, 0fC0D21907;
	fma.rn.ftz.f32 	%f192, %f190, %f187, %f191;
	mul.ftz.f32 	%f193, %f187, %f192;
	mul.ftz.f32 	%f194, %f186, %f193;
	add.ftz.f32 	%f195, %f187, 0f41355DC0;
	mov.f32 	%f196, 0f41E6BD60;
	fma.rn.ftz.f32 	%f197, %f195, %f187, %f196;
	mov.f32 	%f198, 0f419D92C8;
	fma.rn.ftz.f32 	%f199, %f197, %f187, %f198;
	rcp.approx.ftz.f32 	%f200, %f199;
	fma.rn.ftz.f32 	%f201, %f194, %f200, %f186;
	mov.f32 	%f202, 0f3FC90FDB;
	sub.ftz.f32 	%f203, %f202, %f201;
	setp.gt.ftz.f32 	%p28, %f31, %f30;
	selp.f32 	%f204, %f203, %f201, %p28;
	mov.f32 	%f205, 0f40490FDB;
	sub.ftz.f32 	%f206, %f205, %f204;
	selp.f32 	%f207, %f206, %f204, %p27;
	mov.b32 	%r27, %f207;
	or.b32  	%r28, %r4, %r27;
	mov.b32 	%f208, %r28;
	add.ftz.f32 	%f209, %f30, %f31;
	setp.le.ftz.f32 	%p29, %f209, 0f7F800000;
	selp.f32 	%f243, %f208, %f209, %p29;

$L__BB0_15:
	mov.f32 	%f211, 0f40C90FDB;
	div.approx.ftz.f32 	%f212, %f243, %f211;
	add.ftz.f32 	%f213, %f212, 0f3F000000;
	mov.f32 	%f214, 0f3F000000;
	abs.ftz.f32 	%f215, %f29;
	mov.f32 	%f216, 0f3F800000;
	sub.ftz.f32 	%f217, %f216, %f215;
	mul.ftz.f32 	%f218, %f217, 0f3F000000;
	sqrt.approx.ftz.f32 	%f219, %f218;
	setp.gt.ftz.f32 	%p31, %f215, 0f3F11EB85;
	selp.f32 	%f220, %f219, %f215, %p31;
	mul.ftz.f32 	%f221, %f220, %f220;
	mov.f32 	%f222, 0f3C94D2E9;
	mov.f32 	%f223, 0f3D53F941;
	fma.rn.ftz.f32 	%f224, %f223, %f221, %f222;
	mov.f32 	%f225, 0f3D3F841F;
	fma.rn.ftz.f32 	%f226, %f224, %f221, %f225;
	mov.f32 	%f227, 0f3D994929;
	fma.rn.ftz.f32 	%f228, %f226, %f221, %f227;
	mov.f32 	%f229, 0f3E2AAB94;
	fma.rn.ftz.f32 	%f230, %f228, %f221, %f229;
	mul.ftz.f32 	%f231, %f221, %f230;
	fma.rn.ftz.f32 	%f232, %f231, %f220, %f220;
	mov.f32 	%f233, 0f3FC90FDB;
	mov.f32 	%f234, 0fC0000000;
	fma.rn.ftz.f32 	%f235, %f234, %f232, %f233;
	selp.f32 	%f236, %f235, %f232, %p31;
	setp.le.ftz.f32 	%p32, %f236, 0f7F800000;
	mov.b32 	%r42, %f236;
	mov.b32 	%r43, %f29;
	and.b32  	%r44, %r43, -2147483648;
	or.b32  	%r45, %r44, %r42;
	mov.b32 	%f237, %r45;
	selp.f32 	%f238, %f237, %f236, %p32;
	mov.f32 	%f239, 0f40490FDB;
	div.approx.ftz.f32 	%f240, %f238, %f239;
	sub.ftz.f32 	%f241, %f214, %f240;
	mov.b32 	%r39, %f213;
	mov.b32 	%r40, %f241;
	mov.b32 	%r38, %f28;
	mov.b32 	%r37, %f27;
	mov.b32 	%r36, %f26;
	cvt.u32.u64 	%r41, %rd2;
	mov.u32 	%r35, 4;
	// begin inline asm
	call (%r34), _optix_report_intersection_6, (%f14, %r35, %r36, %r37, %r38, %r39, %r40, %r41);
	// end inline asm
	bra.uni 	$L__BB0_16;

$L__BB0_6:
	setp.lt.s32 	%p15, %r1, 0;
	min.ftz.f32 	%f93, %f21, %f20;
	max.ftz.f32 	%f94, %f21, %f20;
	div.full.ftz.f32 	%f95, %f93, %f94;
	mul.rn.ftz.f32 	%f96, %f95, %f95;
	mov.f32 	%f97, 0fC0B59883;
	mov.f32 	%f98, 0fBF52C7EA;
	fma.rn.ftz.f32 	%f99, %f96, %f98, %f97;
	mov.f32 	%f100, 0fC0D21907;
	fma.rn.ftz.f32 	%f101, %f99, %f96, %f100;
	mul.ftz.f32 	%f102, %f96, %f101;
	mul.ftz.f32 	%f103, %f95, %f102;
	add.ftz.f32 	%f104, %f96, 0f41355DC0;
	mov.f32 	%f105, 0f41E6BD60;
	fma.rn.ftz.f32 	%f106, %f104, %f96, %f105;
	mov.f32 	%f107, 0f419D92C8;
	fma.rn.ftz.f32 	%f108, %f106, %f96, %f107;
	rcp.approx.ftz.f32 	%f109, %f108;
	fma.rn.ftz.f32 	%f110, %f103, %f109, %f95;
	mov.f32 	%f111, 0f3FC90FDB;
	sub.ftz.f32 	%f112, %f111, %f110;
	setp.gt.ftz.f32 	%p16, %f21, %f20;
	selp.f32 	%f113, %f112, %f110, %p16;
	mov.f32 	%f114, 0f40490FDB;
	sub.ftz.f32 	%f115, %f114, %f113;
	selp.f32 	%f116, %f115, %f113, %p15;
	mov.b32 	%r7, %f116;
	or.b32  	%r8, %r2, %r7;
	mov.b32 	%f117, %r8;
	add.ftz.f32 	%f118, %f20, %f21;
	setp.le.ftz.f32 	%p17, %f118, 0f7F800000;
	selp.f32 	%f242, %f117, %f118, %p17;

$L__BB0_9:
	mov.f32 	%f120, 0f40C90FDB;
	div.approx.ftz.f32 	%f121, %f242, %f120;
	add.ftz.f32 	%f122, %f121, 0f3F000000;
	mov.f32 	%f123, 0f3F000000;
	abs.ftz.f32 	%f124, %f19;
	mov.f32 	%f125, 0f3F800000;
	sub.ftz.f32 	%f126, %f125, %f124;
	mul.ftz.f32 	%f127, %f126, 0f3F000000;
	sqrt.approx.ftz.f32 	%f128, %f127;
	setp.gt.ftz.f32 	%p19, %f124, 0f3F11EB85;
	selp.f32 	%f129, %f128, %f124, %p19;
	mul.ftz.f32 	%f130, %f129, %f129;
	mov.f32 	%f131, 0f3C94D2E9;
	mov.f32 	%f132, 0f3D53F941;
	fma.rn.ftz.f32 	%f133, %f132, %f130, %f131;
	mov.f32 	%f134, 0f3D3F841F;
	fma.rn.ftz.f32 	%f135, %f133, %f130, %f134;
	mov.f32 	%f136, 0f3D994929;
	fma.rn.ftz.f32 	%f137, %f135, %f130, %f136;
	mov.f32 	%f138, 0f3E2AAB94;
	fma.rn.ftz.f32 	%f139, %f137, %f130, %f138;
	mul.ftz.f32 	%f140, %f130, %f139;
	fma.rn.ftz.f32 	%f141, %f140, %f129, %f129;
	mov.f32 	%f142, 0f3FC90FDB;
	mov.f32 	%f143, 0fC0000000;
	fma.rn.ftz.f32 	%f144, %f143, %f141, %f142;
	selp.f32 	%f145, %f144, %f141, %p19;
	setp.le.ftz.f32 	%p20, %f145, 0f7F800000;
	mov.b32 	%r22, %f145;
	mov.b32 	%r23, %f19;
	and.b32  	%r24, %r23, -2147483648;
	or.b32  	%r25, %r24, %r22;
	mov.b32 	%f146, %r25;
	selp.f32 	%f147, %f146, %f145, %p20;
	mov.f32 	%f148, 0f40490FDB;
	div.approx.ftz.f32 	%f149, %f147, %f148;
	sub.ftz.f32 	%f150, %f123, %f149;
	mov.b32 	%r19, %f122;
	mov.b32 	%r20, %f150;
	mov.b32 	%r18, %f18;
	mov.b32 	%r17, %f17;
	mov.b32 	%r16, %f16;
	cvt.u32.u64 	%r21, %rd2;
	mov.u32 	%r15, 4;
	// begin inline asm
	call (%r14), _optix_report_intersection_6, (%f15, %r15, %r16, %r17, %r18, %r19, %r20, %r21);
	// end inline asm

$L__BB0_16:
	ret;

}

