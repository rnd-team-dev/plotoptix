//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-28540450
// Cuda compilation tools, release 11.0, V11.0.194
// Based on LLVM 3.4svn
//

.version 7.0
.target sm_50
.address_size 64

	// .globl	__closesthit__mesh_occlusion_transparency
.const .align 8 .b8 params[288];

.visible .entry __closesthit__mesh_occlusion_transparency(

)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<75>;
	.reg .b32 	%r<13>;
	.reg .b64 	%rd<15>;


	// inline asm
	call (%rd4), _optix_get_sbt_data_ptr_64, ();
	// inline asm
	ld.v4.f32 	{%f68, %f69, %f70, %f71}, [%rd4+112];
	ld.u32 	%r1, [%rd4+224];
	setp.eq.s32	%p1, %r1, 0;
	@%p1 bra 	BB0_5;

	// inline asm
	call (%f66, %f67), _optix_get_triangle_barycentrics, ();
	// inline asm
	ld.u64 	%rd2, [%rd4+40];
	setp.eq.s64	%p2, %rd2, 0;
	@%p2 bra 	BB0_3;

	ld.u64 	%rd5, [%rd4+48];
	// inline asm
	call (%r2), _optix_read_primitive_idx, ();
	// inline asm
	mul.wide.u32 	%rd6, %r2, 12;
	add.s64 	%rd7, %rd5, %rd6;
	ld.u32 	%r3, [%rd7];
	mul.wide.u32 	%rd8, %r3, 8;
	add.s64 	%rd9, %rd2, %rd8;
	ld.v2.f32 	{%f32, %f33}, [%rd9];
	ld.u32 	%r4, [%rd7+4];
	mul.wide.u32 	%rd10, %r4, 8;
	add.s64 	%rd11, %rd2, %rd10;
	ld.v2.f32 	{%f36, %f37}, [%rd11];
	ld.u32 	%r5, [%rd7+8];
	mul.wide.u32 	%rd12, %r5, 8;
	add.s64 	%rd13, %rd2, %rd12;
	ld.v2.f32 	{%f40, %f41}, [%rd13];
	mov.f32 	%f44, 0f3F800000;
	sub.ftz.f32 	%f45, %f44, %f66;
	sub.ftz.f32 	%f46, %f45, %f67;
	mul.ftz.f32 	%f47, %f66, %f36;
	mul.ftz.f32 	%f48, %f66, %f37;
	fma.rn.ftz.f32 	%f49, %f46, %f32, %f47;
	fma.rn.ftz.f32 	%f50, %f46, %f33, %f48;
	fma.rn.ftz.f32 	%f66, %f67, %f40, %f49;
	fma.rn.ftz.f32 	%f67, %f67, %f41, %f50;

BB0_3:
	ld.u64 	%rd14, [%rd4+192];
	ld.u64 	%rd3, [%rd14];
	setp.eq.s64	%p3, %rd3, 0;
	@%p3 bra 	BB0_5;

	tex.2d.v4.f32.f32	{%f51, %f52, %f53, %f54}, [%rd3, {%f66, %f67}];
	mul.ftz.f32 	%f68, %f68, %f51;
	mul.ftz.f32 	%f69, %f69, %f52;
	mul.ftz.f32 	%f70, %f70, %f53;
	mul.ftz.f32 	%f71, %f71, %f54;

BB0_5:
	mov.f32 	%f58, 0f3F800000;
	sub.ftz.f32 	%f19, %f58, %f71;
	mov.f32 	%f72, 0f00000000;
	setp.leu.ftz.f32	%p4, %f19, 0f00000000;
	mov.f32 	%f73, %f72;
	mov.f32 	%f74, %f72;
	@%p4 bra 	BB0_7;

	// inline asm
	call (%r6), _optix_get_payload_0, ();
	// inline asm
	mov.b32 	 %f59, %r6;
	mul.ftz.f32 	%f72, %f68, %f59;
	// inline asm
	call (%r7), _optix_get_payload_1, ();
	// inline asm
	mov.b32 	 %f60, %r7;
	mul.ftz.f32 	%f73, %f69, %f60;
	// inline asm
	call (%r8), _optix_get_payload_2, ();
	// inline asm
	mov.b32 	 %f61, %r8;
	mul.ftz.f32 	%f74, %f70, %f61;

BB0_7:
	mul.ftz.f32 	%f63, %f19, %f72;
	mov.b32 	 %r9, %f63;
	// inline asm
	call _optix_set_payload_0, (%r9);
	// inline asm
	mul.ftz.f32 	%f64, %f19, %f73;
	mov.b32 	 %r10, %f64;
	// inline asm
	call _optix_set_payload_1, (%r10);
	// inline asm
	mul.ftz.f32 	%f65, %f19, %f74;
	mov.b32 	 %r11, %f65;
	// inline asm
	call _optix_set_payload_2, (%r11);
	// inline asm
	// inline asm
	call (%f62), _optix_get_ray_tmax, ();
	// inline asm
	mov.b32 	 %r12, %f62;
	// inline asm
	call _optix_set_payload_3, (%r12);
	// inline asm
	ret;
}


